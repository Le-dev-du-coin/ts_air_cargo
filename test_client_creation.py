#!/usr/bin/env python
"""
Script de test pour diagnostiquer le probl√®me de cr√©ation de client
Ex√©cuter avec: python manage.py shell < test_client_creation.py
"""

from agent_chine_app.client_management import ClientAccountManager

print("üîß Test de cr√©ation de client")
print("=" * 50)

# Test 1: Test avec donn√©es valides
print("üìã Test 1: Cr√©ation avec donn√©es valides...")
try:
    result = ClientAccountManager.get_or_create_client_with_password(
        telephone="+22376123456",
        first_name="Test",
        last_name="Client",
        email="test@example.com",
        password="password123",
        notify=False
    )
    print(f"‚úÖ Succ√®s: {result}")
    
    # Nettoyer le test
    if result['created']:
        result['client'].delete()
        print("üóëÔ∏è Client de test supprim√©")
        
except Exception as e:
    print(f"‚ùå Erreur: {e}")

# Test 2: Test avec t√©l√©phone vide
print("\nüìã Test 2: Cr√©ation avec t√©l√©phone vide...")
try:
    result = ClientAccountManager.get_or_create_client_with_password(
        telephone="",
        first_name="Test",
        last_name="Client",
        email="test@example.com",
        password="password123",
        notify=False
    )
    print(f"‚ùå Ne devrait pas r√©ussir: {result}")
except Exception as e:
    print(f"‚úÖ Erreur attendue: {e}")

# Test 3: Test avec t√©l√©phone None
print("\nüìã Test 3: Cr√©ation avec t√©l√©phone None...")
try:
    result = ClientAccountManager.get_or_create_client_with_password(
        telephone=None,
        first_name="Test",
        last_name="Client",
        email="test@example.com",
        password="password123",
        notify=False
    )
    print(f"‚ùå Ne devrait pas r√©ussir: {result}")
except Exception as e:
    print(f"‚úÖ Erreur attendue: {e}")

# Test 4: Test de nettoyage du num√©ro
print("\nüìã Test 4: Test de nettoyage du num√©ro...")
try:
    from agent_chine_app.client_management import ClientAccountManager
    
    # Tests de formats diff√©rents
    test_phones = [
        "99281899",
        "0099281899", 
        "22399281899",
        "+22399281899",
        "  +223 99 28 18 99  ",
        "(223) 99-28-18-99",
    ]
    
    for phone in test_phones:
        try:
            cleaned = ClientAccountManager._clean_phone_number(phone)
            print(f"   '{phone}' ‚Üí '{cleaned}'")
        except Exception as e:
            print(f"   '{phone}' ‚Üí ERROR: {e}")
            
except Exception as e:
    print(f"‚ùå Erreur test nettoyage: {e}")

print("\n" + "=" * 50)
print("üéâ Tests termin√©s !")
print("\nüí° Solutions possibles:")
print("1. V√©rifier que le champ t√©l√©phone est bien rempli dans le formulaire")
print("2. V√©rifier la validation JavaScript c√¥t√© client")
print("3. Ajouter des logs pour voir les donn√©es POST re√ßues")
print("4. V√©rifier le nom du champ dans le template HTML")