# Generated by Django 5.2.4 on 2025-09-07 22:46

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('agent_chine_app', '0004_alter_colis_statut'),
        ('notifications_app', '0003_configurationnotification_wachap_chine_access_token_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='configurationnotification',
            name='twilio_account_sid',
            field=models.CharField(blank=True, help_text='[OBSOLÈTE] Ancien SID Twilio - Migration vers WaChap terminée', max_length=200),
        ),
        migrations.AlterField(
            model_name='configurationnotification',
            name='twilio_auth_token',
            field=models.CharField(blank=True, help_text='[OBSOLÈTE] Ancien token Twilio - Migration vers WaChap terminée', max_length=200),
        ),
        migrations.AlterField(
            model_name='configurationnotification',
            name='twilio_whatsapp_number',
            field=models.CharField(blank=True, help_text='[OBSOLÈTE] Ancien numéro Twilio - Migration vers WaChap terminée', max_length=20),
        ),
        migrations.AlterField(
            model_name='configurationnotification',
            name='whatsapp_active',
            field=models.BooleanField(default=False, help_text='Ancienne config - Utiliser WaChap maintenant'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='message_id_externe',
            field=models.CharField(blank=True, help_text='ID du message du service externe (WaChap, Orange SMS, etc.)', max_length=100),
        ),
        migrations.CreateModel(
            name='NotificationTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(help_text='ID unique de la tâche Celery', max_length=255, unique=True)),
                ('task_type', models.CharField(choices=[('individual', 'Notification individuelle'), ('bulk_lot_closed', 'Notifications lot fermé'), ('bulk_lot_shipped', 'Notifications lot expédié'), ('bulk_lot_arrived', 'Notifications lot arrivé'), ('bulk_lot_delivered', 'Notifications lot livré'), ('bulk_custom', 'Notifications personnalisées en masse')], help_text='Type de tâche de notification', max_length=30)),
                ('task_status', models.CharField(choices=[('PENDING', 'En attente'), ('STARTED', 'En cours'), ('SUCCESS', 'Terminé avec succès'), ('FAILURE', 'Échec'), ('RETRY', 'En cours de retry'), ('REVOKED', 'Annulé')], default='PENDING', help_text='Statut actuel de la tâche', max_length=20)),
                ('total_notifications', models.IntegerField(default=0, help_text='Nombre total de notifications à envoyer')),
                ('notifications_sent', models.IntegerField(default=0, help_text='Nombre de notifications envoyées avec succès')),
                ('notifications_failed', models.IntegerField(default=0, help_text='Nombre de notifications échouées')),
                ('retry_count', models.IntegerField(default=0, help_text='Nombre de tentatives de retry')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('result_data', models.JSONField(blank=True, help_text='Données de résultat de la tâche (JSON)', null=True)),
                ('error_message', models.TextField(blank=True, help_text="Message d'erreur en cas d'échec")),
                ('message_template', models.TextField(blank=True, help_text='Template du message utilisé')),
                ('notification_method', models.CharField(default='whatsapp', help_text='Méthode de notification (whatsapp, sms, email)', max_length=20)),
                ('priority', models.IntegerField(default=5, help_text='Priorité de la tâche (1=haute, 10=basse)')),
                ('client_reference', models.ForeignKey(blank=True, help_text='Client concerné (pour notifications individuelles)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='agent_chine_app.client')),
                ('colis_reference', models.ForeignKey(blank=True, help_text='Colis concerné pour les notifications individuelles', null=True, on_delete=django.db.models.deletion.CASCADE, to='agent_chine_app.colis')),
                ('initiated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a déclenché la tâche', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('lot_reference', models.ForeignKey(blank=True, help_text='Lot concerné pour les notifications de masse', null=True, on_delete=django.db.models.deletion.CASCADE, to='agent_chine_app.lot')),
            ],
            options={
                'verbose_name': 'Tâche de Notification',
                'verbose_name_plural': 'Tâches de Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['task_id'], name='notificatio_task_id_1b22e0_idx'), models.Index(fields=['task_status', 'created_at'], name='notificatio_task_st_aca50b_idx'), models.Index(fields=['lot_reference', 'task_type'], name='notificatio_lot_ref_40e3bb_idx'), models.Index(fields=['created_at'], name='notificatio_created_80d2f7_idx')],
            },
        ),
    ]
