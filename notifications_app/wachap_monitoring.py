"""
Service de monitoring des instances WaChap avec alertes automatiques
Surveille l'√©tat des connexions WhatsApp et envoie des alertes admin
"""

import requests
import logging
from datetime import datetime, timedelta
from django.conf import settings
from django.core.cache import cache
from django.core.mail import send_mail
from django.utils import timezone
from typing import Dict, List, Tuple, Optional
import json

logger = logging.getLogger(__name__)


class WaChapMonitor:
    """
    Syst√®me de monitoring des instances WaChap avec alertes automatiques
    """
    
    def __init__(self):
        """Initialise le monitoring avec les configurations"""
        self.base_url = "https://wachap.app/api"
        self.instances = {
            'chine': {
                'access_token': getattr(settings, 'WACHAP_CHINE_ACCESS_TOKEN', ''),
                'instance_id': getattr(settings, 'WACHAP_CHINE_INSTANCE_ID', ''),
                'name': 'Instance Chine',
                'description': 'Instance WhatsApp pour les agents et notifications Chine'
            },
            'mali': {
                'access_token': getattr(settings, 'WACHAP_MALI_ACCESS_TOKEN', ''),
                'instance_id': getattr(settings, 'WACHAP_MALI_INSTANCE_ID', ''),
                'name': 'Instance Mali', 
                'description': 'Instance WhatsApp pour les agents et notifications Mali'
            },
            'system': {
                'access_token': getattr(settings, 'WACHAP_SYSTEM_ACCESS_TOKEN', ''),
                'instance_id': getattr(settings, 'WACHAP_SYSTEM_INSTANCE_ID', ''),
                'name': 'Instance Syst√®me',
                'description': 'Instance WhatsApp pour les OTP et alertes administrateur'
            }
        }
        
        # Configuration des alertes admin
        self.admin_email = getattr(settings, 'ADMIN_EMAIL', '')
        self.admin_phone = getattr(settings, 'ADMIN_PHONE', '')
        self.admin_name = getattr(settings, 'ADMIN_NAME', 'Admin TS Air Cargo')
        
        # Param√®tres d'alerte
        self.check_interval_minutes = 15  # V√©rifier toutes les 15 minutes
        self.alert_cooldown_hours = 2     # √âviter le spam d'alertes
        
    def check_instance_status(self, region: str) -> Dict:
        """
        V√©rifie le statut d'une instance WaChap sp√©cifique
        
        Args:
            region: 'chine', 'mali' ou 'system'
            
        Returns:
            dict: √âtat de l'instance avec d√©tails
        """
        instance = self.instances.get(region)
        if not instance:
            return {
                'region': region,
                'connected': False,
                'error': 'Instance non configur√©e',
                'timestamp': timezone.now().isoformat()
            }
        
        if not instance['access_token'] or not instance['instance_id']:
            return {
                'region': region,
                'connected': False,
                'error': 'Tokens manquants',
                'timestamp': timezone.now().isoformat()
            }
        
        try:
            # Test de connexion avec message test
            payload = {
                'number': '22373451676',  # Num√©ro admin pour test
                'type': 'text',
                'message': f'[MONITORING] Test connexion {instance["name"]} - {datetime.now().strftime("%H:%M")}',
                'instance_id': instance['instance_id'],
                'access_token': instance['access_token']
            }
            
            response = requests.post(
                f"{self.base_url}/send",
                json=payload,
                timeout=15
            )
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    
                    if data.get('status') == 'success':
                        return {
                            'region': region,
                            'connected': True,
                            'message': 'Instance connect√©e et fonctionnelle',
                            'response': data,
                            'timestamp': timezone.now().isoformat()
                        }
                    else:
                        error_msg = data.get('message', 'Erreur inconnue')
                        return {
                            'region': region,
                            'connected': False,
                            'error': error_msg,
                            'response': data,
                            'timestamp': timezone.now().isoformat()
                        }
                except json.JSONDecodeError:
                    return {
                        'region': region,
                        'connected': False,
                        'error': 'R√©ponse non-JSON (page HTML re√ßue)',
                        'timestamp': timezone.now().isoformat()
                    }
            else:
                return {
                    'region': region,
                    'connected': False,
                    'error': f'HTTP {response.status_code}',
                    'timestamp': timezone.now().isoformat()
                }
                
        except requests.exceptions.Timeout:
            return {
                'region': region,
                'connected': False,
                'error': 'Timeout de connexion',
                'timestamp': timezone.now().isoformat()
            }
        except Exception as e:
            return {
                'region': region,
                'connected': False,
                'error': f'Erreur de connexion: {str(e)}',
                'timestamp': timezone.now().isoformat()
            }
    
    def check_all_instances(self) -> Dict[str, Dict]:
        """
        V√©rifie le statut de toutes les instances
        
        Returns:
            dict: √âtat de toutes les instances
        """
        results = {}
        
        for region in self.instances.keys():
            logger.info(f"V√©rification instance {region}...")
            results[region] = self.check_instance_status(region)
            
        return results
    
    def should_send_alert(self, region: str) -> bool:
        """
        V√©rifie si une alerte doit √™tre envoy√©e (√©vite le spam)
        
        Args:
            region: Instance concern√©e
            
        Returns:
            bool: True si alerte doit √™tre envoy√©e
        """
        cache_key = f"wachap_alert_sent_{region}"
        last_alert = cache.get(cache_key)
        
        if last_alert:
            last_alert_time = datetime.fromisoformat(last_alert)
            time_diff = timezone.now() - last_alert_time.replace(tzinfo=timezone.now().tzinfo)
            
            if time_diff < timedelta(hours=self.alert_cooldown_hours):
                logger.info(f"Alerte {region} en cooldown encore {self.alert_cooldown_hours - time_diff.total_seconds()/3600:.1f}h")
                return False
        
        return True
    
    def mark_alert_sent(self, region: str):
        """
        Marque qu'une alerte a √©t√© envoy√©e pour √©viter le spam
        
        Args:
            region: Instance concern√©e
        """
        cache_key = f"wachap_alert_sent_{region}"
        cache.set(cache_key, timezone.now().isoformat(), timeout=self.alert_cooldown_hours * 3600)
    
    def send_disconnect_alert(self, region: str, status: Dict):
        """
        Envoie une alerte de d√©connexion par email et console
        
        Args:
            region: Instance d√©connect√©e
            status: D√©tails du statut
        """
        if not self.should_send_alert(region):
            return
        
        instance = self.instances[region]
        
        # Pr√©parer le message d'alerte
        subject = f"üö® ALERTE: Instance WhatsApp {instance['name']} d√©connect√©e"
        
        message = f"""
üö® ALERTE SYST√àME TS AIR CARGO

Instance WhatsApp d√©connect√©e d√©tect√©e !

üìã D√âTAILS:
‚Ä¢ Instance: {instance['name']} ({region.upper()})
‚Ä¢ Description: {instance['description']}
‚Ä¢ Statut: D√âCONNECT√âE ‚ùå
‚Ä¢ Erreur: {status.get('error', 'Inconnue')}
‚Ä¢ Timestamp: {status.get('timestamp', 'Non disponible')}

üîß ACTION REQUISE:
1. Connectez-vous sur https://wachap.app
2. Allez dans votre dashboard
3. Trouvez l'instance {instance['name']}
4. Cliquez sur "QR Code" ou "Reconnecter"
5. Scannez avec WhatsApp (Param√®tres > Appareils connect√©s)

‚ö†Ô∏è IMPACT:
Cette d√©connexion affecte:
- Les codes OTP pour l'authentification
- Les notifications clients
- Les alertes syst√®me

üïê Prochaine v√©rification dans {self.check_interval_minutes} minutes.

---
TS Air Cargo - Syst√®me de monitoring automatique
{timezone.now().strftime('%d/%m/%Y √† %H:%M:%S')}
        """.strip()
        
        # Envoyer par email si configur√©
        email_sent = False
        if self.admin_email:
            try:
                send_mail(
                    subject=subject,
                    message=message,
                    from_email=getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@ts-aircargo.com'),
                    recipient_list=[self.admin_email],
                    fail_silently=False,
                )
                email_sent = True
                logger.info(f"Alerte email envoy√©e √† {self.admin_email}")
            except Exception as e:
                logger.error(f"Erreur envoi email d'alerte: {e}")
        
        # Envoyer par WhatsApp via autre instance si possible
        whatsapp_sent = False
        if self.admin_phone:
            whatsapp_sent = self.send_whatsapp_alert(region, message)
        
        # Log syst√®me
        alert_summary = f"üö® ALERTE: Instance {region.upper()} d√©connect√©e | Email: {'‚úÖ' if email_sent else '‚ùå'} | WhatsApp: {'‚úÖ' if whatsapp_sent else '‚ùå'}"
        logger.critical(alert_summary)
        print(f"\n{alert_summary}")
        print(f"Erreur: {status.get('error')}")
        
        # Marquer comme envoy√©
        self.mark_alert_sent(region)
        
        # Sauvegarder l'historique des alertes
        self.save_alert_history(region, status, email_sent, whatsapp_sent)
    
    def send_whatsapp_alert(self, failed_region: str, message: str) -> bool:
        """
        Envoie l'alerte par WhatsApp via une autre instance fonctionnelle
        
        Args:
            failed_region: Instance qui a √©chou√©
            message: Message d'alerte
            
        Returns:
            bool: Succ√®s de l'envoi
        """
        # Trouver une instance fonctionnelle pour envoyer l'alerte
        for region, instance in self.instances.items():
            if region == failed_region:
                continue  # √âviter l'instance d√©faillante
                
            if not instance['access_token'] or not instance['instance_id']:
                continue
            
            try:
                payload = {
                    'number': self.admin_phone.replace('+', ''),
                    'type': 'text',
                    'message': f"üö® ALERTE WHATSAPP D√âCONNECT√â\n\n{message}",
                    'instance_id': instance['instance_id'],
                    'access_token': instance['access_token']
                }
                
                response = requests.post(
                    f"{self.base_url}/send",
                    json=payload,
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('status') == 'success':
                        logger.info(f"Alerte WhatsApp envoy√©e via instance {region}")
                        return True
                        
            except Exception as e:
                logger.warning(f"Impossible d'envoyer alerte via instance {region}: {e}")
                continue
        
        logger.warning("Aucune instance WhatsApp disponible pour envoyer l'alerte")
        return False
    
    def save_alert_history(self, region: str, status: Dict, email_sent: bool, whatsapp_sent: bool):
        """
        Sauvegarde l'historique des alertes dans le cache
        
        Args:
            region: Instance concern√©e
            status: Statut de l'instance
            email_sent: Si email envoy√©
            whatsapp_sent: Si WhatsApp envoy√©
        """
        history_key = "wachap_alert_history"
        history = cache.get(history_key, [])
        
        alert_record = {
            'timestamp': timezone.now().isoformat(),
            'region': region,
            'instance_name': self.instances[region]['name'],
            'error': status.get('error'),
            'email_sent': email_sent,
            'whatsapp_sent': whatsapp_sent,
            'admin_email': self.admin_email,
            'admin_phone': self.admin_phone
        }
        
        history.append(alert_record)
        
        # Garder seulement les 50 derni√®res alertes
        if len(history) > 50:
            history = history[-50:]
        
        # Sauvegarder pour 7 jours
        cache.set(history_key, history, timeout=7 * 24 * 3600)
    
    def get_alert_history(self) -> List[Dict]:
        """
        R√©cup√®re l'historique des alertes
        
        Returns:
            list: Historique des alertes
        """
        return cache.get("wachap_alert_history", [])
    
    def run_monitoring_check(self):
        """
        Ex√©cute une v√©rification compl√®te du monitoring
        """
        logger.info("üîç D√©marrage v√©rification monitoring WaChap...")
        
        try:
            # V√©rifier toutes les instances
            all_status = self.check_all_instances()
            
            connected_count = 0
            disconnected_instances = []
            
            for region, status in all_status.items():
                if status['connected']:
                    connected_count += 1
                    logger.info(f"‚úÖ Instance {region}: Connect√©e")
                else:
                    disconnected_instances.append((region, status))
                    logger.warning(f"‚ùå Instance {region}: D√©connect√©e - {status.get('error')}")
            
            # Envoyer alertes pour les instances d√©connect√©es
            for region, status in disconnected_instances:
                self.send_disconnect_alert(region, status)
            
            # R√©sum√©
            total_instances = len(self.instances)
            summary = f"Monitoring termin√©: {connected_count}/{total_instances} instances connect√©es"
            
            if disconnected_instances:
                logger.critical(summary)
                logger.critical(f"Instances d√©connect√©es: {[r for r, s in disconnected_instances]}")
            else:
                logger.info(summary)
            
            # Sauvegarder le dernier check
            cache.set('last_wachap_monitoring_check', {
                'timestamp': timezone.now().isoformat(),
                'connected_count': connected_count,
                'total_instances': total_instances,
                'disconnected_instances': [r for r, s in disconnected_instances],
                'all_status': all_status
            }, timeout=24 * 3600)
            
            return all_status
            
        except Exception as e:
            logger.error(f"Erreur lors du monitoring WaChap: {e}")
            return {}
    
    def get_monitoring_status(self) -> Dict:
        """
        R√©cup√®re le statut du dernier monitoring
        
        Returns:
            dict: Statut du monitoring
        """
        return cache.get('last_wachap_monitoring_check', {})


# Instance globale du monitor
wachap_monitor = WaChapMonitor()


def run_wachap_monitoring():
    """
    Fonction utilitaire pour lancer le monitoring
    """
    return wachap_monitor.run_monitoring_check()


def get_wachap_monitoring_status():
    """
    Fonction utilitaire pour r√©cup√©rer le statut
    """
    return wachap_monitor.get_monitoring_status()


def get_wachap_alert_history():
    """
    Fonction utilitaire pour r√©cup√©rer l'historique des alertes
    """
    return wachap_monitor.get_alert_history()
