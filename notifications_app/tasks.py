"""
T√¢ches Celery pour l'envoi asynchrone de notifications
Version unifi√©e pour toutes les apps (agent_chine, agent_mali, admin, client)
"""

import logging
from celery import shared_task
from django.utils import timezone
from django.conf import settings
from django.db import transaction
from .models import Notification, NotificationTask
from .services import NotificationService
from .utils import format_cfa

logger = logging.getLogger(__name__)


@shared_task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})
def send_individual_notification(self, notification_id):
    """
    T√¢che Celery pour envoyer une notification individuelle de fa√ßon asynchrone
    
    Args:
        notification_id (int): ID de la notification √† envoyer
        
    Returns:
        dict: R√©sultat de l'envoi avec succ√®s/√©chec et d√©tails
    """
    try:
        # R√©cup√©rer la notification
        notification = Notification.objects.get(id=notification_id)
        
        # Marquer comme en cours de traitement
        notification.statut = 'en_attente'
        notification.save(update_fields=['statut'])
        
        # Envoyer la notification via le service
        success = False
        error_message = None
        
        if notification.type_notification == 'whatsapp':
            success, message_id = NotificationService._send_whatsapp(
                user=notification.destinataire,
                message=notification.message,
                categorie=notification.categorie,
                title=notification.titre,
            )
        elif notification.type_notification == 'sms':
            success, message_id = NotificationService._send_sms(
                user=notification.destinataire,
                message=notification.message
            )
        elif notification.type_notification == 'email':
            success, message_id = NotificationService._send_email(
                user=notification.destinataire,
                message=notification.message,
                title=notification.titre
            )
        
        # Mettre √† jour le statut selon le r√©sultat
        if success:
            notification.marquer_comme_envoye(message_id if 'message_id' in locals() else None)
            logger.info(f"Notification {notification_id} envoy√©e avec succ√®s √† {notification.destinataire.telephone}")
            return {
                'success': True,
                'notification_id': notification_id,
                'message_id': message_id if 'message_id' in locals() else None,
                'recipient': notification.destinataire.telephone
            }
        else:
            error_message = "√âchec d'envoi via le service de notification"
            notification.marquer_comme_echec(error_message)
            logger.error(f"√âchec envoi notification {notification_id}: {error_message}")
            
            # Relancer la t√¢che si pas encore au maximum de tentatives
            if self.request.retries < self.max_retries:
                raise Exception(f"Retry notification {notification_id}")
            
            return {
                'success': False,
                'notification_id': notification_id,
                'error': error_message,
                'recipient': notification.destinataire.telephone
            }
            
    except Notification.DoesNotExist:
        error_msg = f"Notification {notification_id} introuvable"
        logger.error(error_msg)
        return {
            'success': False,
            'notification_id': notification_id,
            'error': error_msg
        }
    except Exception as e:
        error_msg = f"Erreur lors de l'envoi notification {notification_id}: {str(e)}"
        logger.error(error_msg)
        
        # Si c'est un retry, marquer la notification comme √©chou√©e d√©finitivement
        if self.request.retries >= self.max_retries:
            try:
                notification = Notification.objects.get(id=notification_id)
                notification.marquer_comme_echec(error_msg)
            except:
                pass
        
        # Relancer si possible
        if self.request.retries < self.max_retries:
            raise self.retry(countdown=60 * (2 ** self.request.retries))  # Backoff exponentiel
        
        return {
            'success': False,
            'notification_id': notification_id,
            'error': error_msg
        }


@shared_task(bind=True)
def send_bulk_received_colis_notifications(self, colis_ids_list, notification_type='lot_arrived', message_template=None, initiated_by_id=None):
    """
    T√¢che Celery pour envoyer des notifications seulement aux colis sp√©cifiquement r√©ceptionn√©s
    
    Args:
        colis_ids_list (list): Liste des IDs des colis r√©ceptionn√©s
        notification_type (str): Type de notification (d√©faut: 'lot_arrived')
        message_template (str, optional): Template personnalis√© du message
        initiated_by_id (int, optional): ID de l'utilisateur qui a initi√© la t√¢che
        
    Returns:
        dict: Statistiques d'envoi
    """
    task_record = None
    
    try:
        from agent_chine_app.models import Colis
        
        # R√©cup√©rer les colis r√©ceptionn√©s uniquement
        colis_list = Colis.objects.filter(
            id__in=colis_ids_list
        ).select_related('client__user', 'lot').all()
        
        if not colis_list:
            return {
                'success': False,
                'error': 'Aucun colis trouv√© dans la liste fournie',
                'colis_ids': colis_ids_list
            }
        
        # R√©cup√©rer le lot depuis le premier colis (ils sont du m√™me lot)
        lot = colis_list[0].lot
        
        # Cr√©er l'enregistrement de suivi de la t√¢che
        task_record = NotificationTask.objects.create(
            task_id=self.request.id,
            task_type=f'bulk_received_{notification_type}',
            lot_reference=lot,
            initiated_by_id=initiated_by_id,
            message_template=message_template or '',
            total_notifications=len(colis_ids_list)
        )
        
        task_record.mark_as_started()
        
        clients_map = {}
        notifications_created = []
        
        # Messages templates (m√™me que l'original mais pour colis r√©ceptionn√©s)
        messages_templates = {
            'lot_arrived': {
                'title': 'Colis arriv√© au Mali',
                'template': """üìç Bonne nouvelle ! Votre colis est arriv√© !

Votre colis {numero_suivi} du lot {numero_lot} est arriv√© au Mali.

üìÖ Date d'arriv√©e: {date_arrivee}

√âquipe TS Air Cargo""",
                'categorie': 'colis_arrive'
            }
        }
        
        template_info = messages_templates.get(notification_type, messages_templates['lot_arrived'])
        final_template = message_template or template_info['template']
        
        # Construire la map client -> liste de colis R√âCEPTIONN√âS seulement
        for colis in colis_list:
            client = colis.client
            data = clients_map.setdefault(client.id, {
                'client': client,
                'user': client.user,
                'colis': []
            })
            data['colis'].append(colis)

        # Cr√©er une notification par client pour ses colis r√©ceptionn√©s
        for _, data in clients_map.items():
            client = data['client']
            colis_du_client = data['colis']
            numeros = [c.numero_suivi for c in colis_du_client]
            numeros_bullets = "\n".join([f"- {num}" for num in numeros])
            multi = len(numeros) > 1

            # Pr√©parer les variables communes
            template_vars = {
                'numero_suivi': numeros[0] if numeros else '',
                'numero_lot': lot.numero_lot,
                'date_arrivee': lot.date_arrivee.strftime('%d/%m/%Y √† %H:%M') if hasattr(lot, 'date_arrivee') and lot.date_arrivee else '',
            }

            # Adapter le message selon le nombre de colis
            if multi:
                header = f"üìç Bonne nouvelle ! Vos colis sont arriv√©s !\n\nVos colis du lot {lot.numero_lot} sont arriv√©s au Mali.\nüìÖ Date d'arriv√©e: {template_vars['date_arrivee']}"
                formatted_message = f"{header}\n\nColis arriv√©s:\n{numeros_bullets}\n\n√âquipe TS Air Cargo"
            else:
                try:
                    formatted_message = final_template.format(**template_vars)
                except KeyError as e:
                    formatted_message = final_template
                    logger.warning(f"Variable manquante dans template: {e}")

            # Ajouter info de d√©veloppement si n√©cessaire
            if getattr(settings, 'DEBUG', False):
                formatted_message = f"""[MODE DEV] {template_info['title']}

üë§ Client: {client.user.get_full_name()}
üìû T√©l√©phone: {client.user.telephone}

{formatted_message}

Merci de votre confiance !
√âquipe TS Air Cargo üöÄ"""

            # Cr√©er la notification en base (une par client)
            notification = Notification.objects.create(
                destinataire=client.user,
                type_notification='whatsapp',
                categorie=template_info['categorie'],
                titre=template_info['title'],
                message=formatted_message,
                telephone_destinataire=client.user.telephone,
                email_destinataire=client.user.email or '',
                statut='en_attente',
                lot_reference=lot
            )

            notifications_created.append(notification.id)
        
        # Mettre √† jour le nombre total r√©el
        task_record.total_notifications = len(notifications_created)
        task_record.save(update_fields=['total_notifications'])
        
        # Envoyer toutes les notifications de fa√ßon asynchrone
        sent_count = 0
        failed_count = 0
        
        for notif_id in notifications_created:
            try:
                send_individual_notification.delay(notif_id)
                sent_count += 1
            except Exception as e:
                logger.error(f"Erreur lors du lancement de la t√¢che pour notification {notif_id}: {e}")
                failed_count += 1
        
        # Mettre √† jour les statistiques
        task_record.update_progress(sent_count=sent_count, failed_count=failed_count)
        
        # Marquer la t√¢che comme termin√©e
        result_data = {
            'colis_ids': colis_ids_list,
            'notification_type': notification_type,
            'total_notifications': len(notifications_created),
            'notifications_queued': sent_count,
            'queue_failures': failed_count,
            'clients_count': len(clients_map)
        }
        
        task_record.mark_as_completed(
            success=True,
            result_data=result_data
        )
        
        logger.info(f"T√¢che de notification cibl√©e termin√©e pour {len(colis_ids_list)} colis r√©ceptionn√©s: {sent_count} notifications en file d'attente")
        
        return result_data
        
    except Exception as e:
        error_msg = f"Erreur lors de l'envoi cibl√© pour colis {colis_ids_list}: {str(e)}"
        logger.error(error_msg)
        
        if task_record:
            task_record.mark_as_completed(
                success=False,
                error_message=error_msg
            )
        
        return {
            'success': False,
            'error': error_msg,
            'colis_ids': colis_ids_list
        }


@shared_task(bind=True)
def send_bulk_lot_notifications(self, lot_id, notification_type, message_template=None, initiated_by_id=None):
    """
    T√¢che Celery pour envoyer des notifications en masse pour un lot
    
    Args:
        lot_id (int): ID du lot concern√©
        notification_type (str): Type de notification ('lot_closed', 'lot_shipped', 'lot_arrived', 'lot_delivered')
        message_template (str, optional): Template personnalis√© du message
        initiated_by_id (int, optional): ID de l'utilisateur qui a initi√© la t√¢che
        
    Returns:
        dict: Statistiques d'envoi
    """
    task_record = None
    
    try:
        # Importer les mod√®les ici pour √©viter les imports circulaires
        from agent_chine_app.models import Lot
        
        # R√©cup√©rer le lot
        lot = Lot.objects.get(id=lot_id)
        
        # Cr√©er l'enregistrement de suivi de la t√¢che
        task_record = NotificationTask.objects.create(
            task_id=self.request.id,
            task_type=f'bulk_{notification_type}',
            lot_reference=lot,
            initiated_by_id=initiated_by_id,
            message_template=message_template or '',
            total_notifications=lot.colis.count()
        )
        
        task_record.mark_as_started()
        
        # R√©cup√©rer tous les colis du lot et regrouper par client (agr√©gation)
        colis_list = lot.colis.select_related('client__user').all()
        clients_map = {}
        notifications_created = []
        
        # D√©terminer le message selon le type
        messages_templates = {
            'lot_closed': {
                'title': 'Lot ferm√© - Pr√™t √† exp√©dier',
                'template': """üì¶ Lot ferm√© - Pr√™t √† exp√©dier !

Votre colis {numero_suivi} dans le lot {numero_lot} est maintenant pr√™t √† √™tre exp√©di√©.

Vous recevrez une notification lors de l'exp√©dition.

√âquipe TS Air Cargo""",
                'categorie': 'lot_expedie'
            },
            'lot_shipped': {
                'title': 'Colis exp√©di√© - En transit',
                'template': """üöö Colis exp√©di√© - En transit !

Votre colis {numero_suivi} a √©t√© exp√©di√© dans le lot {numero_lot}.

üìÖ Date d'exp√©dition: {date_expedition}

Votre colis est maintenant en route vers le Mali.
Vous recevrez une notification √† son arriv√©e.

√âquipe TS Air Cargo""",
                'categorie': 'colis_en_transit'
            },
            'lot_arrived': {
                'title': 'Colis arriv√© au Mali',
                'template': """üìç Bonne nouvelle ! Votre colis est arriv√© !

Votre colis {numero_suivi} du lot {numero_lot} est arriv√© au Mali.

üìÖ Date d'arriv√©e: {date_arrivee}

√âquipe TS Air Cargo""",
                'categorie': 'colis_arrive'
            },
            'lot_delivered': {
                'title': 'Colis livr√© avec succ√®s',
                'template': """‚úÖ Livraison r√©ussie !

Votre colis {numero_suivi} du lot {numero_lot} a √©t√© livr√© avec succ√®s.

üìÖ Date de livraison: {date_livraison}

Merci d'avoir choisi TS Air Cargo pour vos envois !

√âquipe TS Air Cargo""",
                'categorie': 'colis_livre'
            }
        }
        
        # Utiliser le template personnalis√© ou celui par d√©faut
        template_info = messages_templates.get(notification_type, messages_templates['lot_closed'])
        final_template = message_template or template_info['template']
        
        # Construire la map client -> liste de colis
        for colis in colis_list:
            client = colis.client
            data = clients_map.setdefault(client.id, {
                'client': client,
                'user': client.user,
                'colis': []
            })
            data['colis'].append(colis)

        # Cr√©er une notification par client en agr√©geant les num√©ros de suivi
        for _, data in clients_map.items():
            client = data['client']
            colis_du_client = data['colis']
            numeros = [c.numero_suivi for c in colis_du_client]
            numeros_bullets = "\n".join([f"- {num}" for num in numeros])
            multi = len(numeros) > 1

            # Pr√©parer les variables communes
            template_vars = {
                'numero_suivi': numeros[0] if numeros else '',
                'numero_lot': lot.numero_lot,
                'date_expedition': lot.date_expedition.strftime('%d/%m/%Y √† %H:%M') if lot.date_expedition else '',
                'date_arrivee': lot.date_arrivee.strftime('%d/%m/%Y √† %H:%M') if hasattr(lot, 'date_arrivee') and lot.date_arrivee else '',
                'date_livraison': timezone.now().strftime('%d/%m/%Y √† %H:%M'),
            }

            # G√©n√©rer un message adapt√© lot_closed / lot_shipped avec agr√©gation
            if notification_type in ['lot_closed', 'lot_shipped']:
                try:
                    base_message = final_template.format(**template_vars)
                except KeyError as e:
                    base_message = final_template
                    logger.warning(f"Variable manquante dans template: {e}")

                if multi:
                    # Adapter wording au pluriel et ajouter la liste des num√©ros
                    if notification_type == 'lot_closed':
                        header = f"üì¶ Lot ferm√© - Pr√™t √† exp√©dier !\n\nVos colis dans le lot {lot.numero_lot} sont maintenant pr√™ts √† √™tre exp√©di√©s."
                    else:  # lot_shipped
                        header = f"üöö Colis exp√©di√©s - En transit !\n\nVos colis du lot {lot.numero_lot} ont √©t√© exp√©di√©s.\nüìÖ Date d'exp√©dition: {template_vars['date_expedition']}"

                    formatted_message = f"{header}\n\nColis concern√©s:\n{numeros_bullets}\n\n√âquipe TS Air Cargo"
                else:
                    # Message mono-colis (conserver template existant)
                    formatted_message = base_message
            else:
                # Pour les autres types (arriv√©e/livraison), conserver le message existant tel quel
                try:
                    formatted_message = final_template.format(**template_vars)
                except KeyError as e:
                    formatted_message = final_template
                    logger.warning(f"Variable manquante dans template: {e}")

            # Ajouter info de d√©veloppement si n√©cessaire
            if getattr(settings, 'DEBUG', False):
                formatted_message = f"""[MODE DEV] {template_info['title']}

üë§ Client: {client.user.get_full_name()}
üìû T√©l√©phone: {client.user.telephone}

{formatted_message}

Merci de votre confiance !
√âquipe TS Air Cargo üöÄ"""

            # Cr√©er la notification en base (une par client)
            notification = Notification.objects.create(
                destinataire=client.user,
                type_notification='whatsapp',
                categorie=template_info['categorie'],
                titre=template_info['title'],
                message=formatted_message,
                telephone_destinataire=client.user.telephone,
                email_destinataire=client.user.email or '',
                statut='en_attente',
                lot_reference=lot
            )

            notifications_created.append(notification.id)
        
        # Mettre √† jour le nombre total r√©el
        task_record.total_notifications = len(notifications_created)
        task_record.save(update_fields=['total_notifications'])
        
        # Envoyer toutes les notifications de fa√ßon asynchrone
        sent_count = 0
        failed_count = 0
        
        for notif_id in notifications_created:
            try:
                # Lancer la t√¢che d'envoi individuelle
                send_individual_notification.delay(notif_id)
                sent_count += 1
            except Exception as e:
                logger.error(f"Erreur lors du lancement de la t√¢che pour notification {notif_id}: {e}")
                failed_count += 1
        
        # Mettre √† jour les statistiques
        task_record.update_progress(sent_count=sent_count, failed_count=failed_count)
        
        # Marquer la t√¢che comme termin√©e
        result_data = {
            'lot_id': lot_id,
            'notification_type': notification_type,
            'total_notifications': len(notifications_created),
            'notifications_queued': sent_count,
            'queue_failures': failed_count,
            'clients_count': len(clients_map)
        }
        
        task_record.mark_as_completed(
            success=True,
            result_data=result_data
        )
        
        logger.info(f"T√¢che de notification de masse termin√©e pour lot {lot.numero_lot}: {sent_count} notifications en file d'attente")
        
        return result_data
        
    except Exception as e:
        error_msg = f"Erreur lors de l'envoi en masse pour lot {lot_id}: {str(e)}"
        logger.error(error_msg)
        
        if task_record:
            task_record.mark_as_completed(
                success=False,
                error_message=error_msg
            )
        
        return {
            'success': False,
            'error': error_msg,
            'lot_id': lot_id
        }


@shared_task(bind=True)
def process_pending_notifications(self):
    """
    T√¢che p√©riodique pour traiter les notifications en attente de retry
    √Ä programmer avec celery beat
    """
    try:
        # Rechercher les notifications √©chou√©es pr√™tes pour un retry
        now = timezone.now()
        retry_notifications = Notification.objects.filter(
            statut='echec',
            nombre_tentatives__lt=3,  # Maximum 3 tentatives
            prochaine_tentative__lte=now
        )
        
        retry_count = 0
        for notification in retry_notifications[:50]:  # Limiter √† 50 par batch
            try:
                send_individual_notification.delay(notification.id)
                retry_count += 1
            except Exception as e:
                logger.error(f"Erreur relance notification {notification.id}: {e}")
        
        logger.info(f"Relanc√© {retry_count} notifications en retry")
        return {
            'success': True,
            'retried_count': retry_count
        }
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement des notifications en attente: {e}")
        return {
            'success': False,
            'error': str(e)
        }


@shared_task
def cleanup_old_notifications():
    """
    T√¢che de nettoyage des anciennes notifications et t√¢ches
    √Ä programmer hebdomadairement
    """
    try:
        # Supprimer les notifications anciennes (> 6 mois)
        cutoff_date = timezone.now() - timezone.timedelta(days=180)
        
        old_notifications = Notification.objects.filter(
            date_creation__lt=cutoff_date,
            statut__in=['envoye', 'lu', 'echec']
        )
        notifications_deleted = old_notifications.count()
        old_notifications.delete()
        
        # Supprimer les t√¢ches termin√©es anciennes (> 3 mois)
        task_cutoff = timezone.now() - timezone.timedelta(days=90)
        old_tasks = NotificationTask.objects.filter(
            created_at__lt=task_cutoff,
            task_status__in=['SUCCESS', 'FAILURE']
        )
        tasks_deleted = old_tasks.count()
        old_tasks.delete()
        
        logger.info(f"Nettoyage: {notifications_deleted} notifications et {tasks_deleted} t√¢ches supprim√©es")
        
        return {
            'success': True,
            'notifications_deleted': notifications_deleted,
            'tasks_deleted': tasks_deleted
        }
        
    except Exception as e:
        logger.error(f"Erreur lors du nettoyage: {e}")
        return {
            'success': False,
            'error': str(e)
        }


# T√¢ches sp√©cialis√©es pour l'app agent_chine (utilisant les t√¢ches g√©n√©riques ci-dessus)

@shared_task
def notify_colis_created(colis_id, initiated_by_id=None):
    """
    Notification pour la cr√©ation d'un colis (app agent_chine)
    """
    try:
        from agent_chine_app.models import Colis
        
        colis = Colis.objects.select_related('client__user', 'lot').get(id=colis_id)
        client = colis.client
        
        # D√©tails selon le type de transport
        if colis.type_transport == 'bateau':
            details_transport = f"üìä Dimensions: {colis.longueur}x{colis.largeur}x{colis.hauteur} cm"
        else:  # cargo ou express
            details_transport = f"‚öñÔ∏è Poids: {colis.poids} kg"
        
        # Message d'invitation √† se connecter pour voir l'image
        photo_message = ""
        if colis.image:
            photo_message = "\n\nüì∑ Une photo de votre colis a √©t√© prise.\nüíª Connectez-vous √† votre compte client pour la consulter."
        
        # Pr√©parer le message
        if getattr(settings, 'DEBUG', True):
            message = f"""‚úÖ [MODE DEV] Nouveau colis enregistr√© !

üë§ Client: {client.user.get_full_name()}
üìû T√©l√©phone: {client.user.telephone}

üì¶ Colis: {colis.numero_suivi}
üöö Type: {colis.get_type_transport_display()}
üì¶ Lot: {colis.lot.numero_lot}
üìç Statut: {colis.get_statut_display()}
üí∞ Prix: {format_cfa(colis.prix_calcule)} FCFA

{details_transport}{photo_message}

üåê Acc√©dez √† votre espace: https://ts-aircargo.com

Merci de votre confiance !
√âquipe TS Air Cargo üöÄ"""
        else:
            message = f"""‚úÖ Votre colis {colis.numero_suivi} a √©t√© enregistr√© dans le lot {colis.lot.numero_lot}. Type: {colis.get_type_transport_display()}. Prix: {format_cfa(colis.prix_calcule)} FCFA. {details_transport}{photo_message}

üåê Acc√©dez √† votre espace: https://ts-aircargo.com"""
        
        # Cr√©er la notification
        notification = Notification.objects.create(
            destinataire=client.user,
            type_notification='whatsapp',
            categorie='colis_cree',
            titre="Colis Enregistr√©",
            message=message,
            telephone_destinataire=client.user.telephone,
            email_destinataire=client.user.email or '',
            statut='en_attente',
            colis_reference=colis,
            lot_reference=colis.lot
        )
        
        # Envoyer de fa√ßon asynchrone
        send_individual_notification.delay(notification.id)
        
        return {
            'success': True,
            'notification_id': notification.id,
            'colis_id': colis_id
        }
        
    except Exception as e:
        logger.error(f"Erreur notification cr√©ation colis {colis_id}: {e}")
        return {
            'success': False,
            'error': str(e),
            'colis_id': colis_id
        }


@shared_task
def notify_colis_updated(colis_id, initiated_by_id=None):
    """
    Notification pour la modification d'un colis (app agent_chine)
    """
    try:
        from agent_chine_app.models import Colis
        
        colis = Colis.objects.select_related('client__user').get(id=colis_id)
        client = colis.client
        
        message = f"üîÑ Votre colis {colis.numero_suivi} a √©t√© modifi√©. Nouveau statut: {colis.get_statut_display()}"
        
        # Cr√©er la notification
        notification = Notification.objects.create(
            destinataire=client.user,
            type_notification='whatsapp',
            categorie='information_generale',
            titre="Colis Modifi√©",
            message=message,
            telephone_destinataire=client.user.telephone,
            email_destinataire=client.user.email or '',
            statut='en_attente',
            colis_reference=colis
        )
        
        # Envoyer de fa√ßon asynchrone
        send_individual_notification.delay(notification.id)
        
        return {
            'success': True,
            'notification_id': notification.id,
            'colis_id': colis_id
        }
        
    except Exception as e:
        logger.error(f"Erreur notification modification colis {colis_id}: {e}")
        return {
            'success': False,
            'error': str(e),
            'colis_id': colis_id
        }


@shared_task
def notify_lot_received_mali(lot_id, agent_mali_id=None):
    """
    Notification pour l'arriv√©e d'un lot au Mali (app agent_mali)
    """
    try:
        from agent_chine_app.models import Lot
        from authentication.models import CustomUser
        
        lot = Lot.objects.select_related().get(id=lot_id)
        agent_mali = None
        
        if agent_mali_id:
            try:
                agent_mali = CustomUser.objects.get(id=agent_mali_id)
            except CustomUser.DoesNotExist:
                pass
        
        # Utiliser le service pour envoyer les notifications
        from notifications_app.services import NotificationService
        result = NotificationService.send_lot_reception_notification(lot, agent_mali)
        
        logger.info(f"T√¢che notification arriv√©e Mali - Lot {lot.numero_lot}: {result}")
        
        return result
        
    except Exception as e:
        error_msg = f"Erreur t√¢che notification arriv√©e Mali pour lot {lot_id}: {str(e)}"
        logger.error(error_msg)
        return {
            'success': False,
            'error': error_msg,
            'lot_id': lot_id
        }


@shared_task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 30})
def send_otp_async(self, phone_number, otp_code, cache_key=None, user_id=None):
    """
    T√¢che asynchrone pour envoyer un OTP via WhatsApp
    Am√©liore la r√©silience et √©vite les plantages de l'interface utilisateur
    
    Args:
        phone_number: Num√©ro de t√©l√©phone destinataire
        otp_code: Code OTP √† envoyer
        cache_key: Cl√© cache pour mettre √† jour le statut
        user_id: ID utilisateur pour logging
    
    Returns:
        dict: R√©sultat de l'envoi avec statut et message user-friendly
    """
    from .wachap_service import send_whatsapp_otp
    from django.core.cache import cache
    from django.utils import timezone
    import logging
    
    logger = logging.getLogger(__name__)
    
    try:
        # Mettre √† jour le statut en cache : envoi en cours
        if cache_key:
            otp_data = cache.get(cache_key, {})
            otp_data.update({
                'status': 'sending',
                'sending_started_at': timezone.now().isoformat()
            })
            cache.set(cache_key, otp_data, timeout=600)
        
        logger.info(f"üîÑ Envoi OTP asynchrone vers {phone_number} (tentative {self.request.retries + 1}/4)")
        
        # Envoi de l'OTP
        success, raw_message = send_whatsapp_otp(phone_number, otp_code)
        
        # Messages utilisateur-friendly (masquer les d√©tails techniques)
        if success:
            user_message = "Code de v√©rification envoy√© avec succ√®s"
            final_status = 'sent'
            logger.info(f"‚úÖ OTP envoy√© avec succ√®s vers {phone_number}")
        else:
            # Convertir les erreurs techniques en messages compr√©hensibles
            if "timeout" in raw_message.lower():
                user_message = "Service temporairement indisponible. Nouvelle tentative en cours..."
            elif "invalid" in raw_message.lower() or "invalid√©" in raw_message.lower():
                user_message = "Service de messagerie en maintenance. R√©essayez dans quelques minutes."
            elif "network" in raw_message.lower() or "connexion" in raw_message.lower():
                user_message = "Probl√®me de connexion. Nouvelle tentative automatique..."
            else:
                user_message = "Erreur temporaire. Nous r√©essayons automatiquement..."
            
            final_status = 'failed'
            logger.error(f"‚ùå √âchec envoi OTP vers {phone_number}: {raw_message}")
            
            # D√©clencher un retry automatique si pas encore max retries
            if self.request.retries < 3:
                logger.warning(f"‚è≥ Retry #{self.request.retries + 2} dans 30 secondes...")
                raise Exception(f"Retry OTP: {raw_message}")
        
        # Mettre √† jour le statut final en cache
        if cache_key:
            otp_data = cache.get(cache_key, {})
            otp_data.update({
                'status': final_status,
                'user_message': user_message,
                'completed_at': timezone.now().isoformat(),
                'attempts': self.request.retries + 1
            })
            cache.set(cache_key, otp_data, timeout=600)
        
        return {
            'success': success,
            'user_message': user_message,
            'phone_number': phone_number,
            'attempts': self.request.retries + 1,
            'final_attempt': True
        }
        
    except Exception as e:
        logger.error(f"üí• Erreur critique envoi OTP vers {phone_number}: {str(e)}")
        
        # Statut d'√©chec d√©finitif si on est au dernier retry
        if self.request.retries >= 3:
            if cache_key:
                otp_data = cache.get(cache_key, {})
                otp_data.update({
                    'status': 'failed_final',
                    'user_message': 'Impossible d\'envoyer le code actuellement. Contactez le support.',
                    'completed_at': timezone.now().isoformat(),
                    'attempts': self.request.retries + 1
                })
                cache.set(cache_key, otp_data, timeout=600)
            
            return {
                'success': False,
                'user_message': 'Impossible d\'envoyer le code actuellement. Contactez le support.',
                'phone_number': phone_number,
                'attempts': self.request.retries + 1,
                'final_attempt': True
            }
        else:
            # Re-raise pour d√©clencher le retry automatique
            raise e
