"""
Gestionnaire de timeout et retry pour les API WaChap
Am√©liore la robustesse des envois de messages
"""

import time
import logging
import requests
from typing import Tuple, Optional, Dict, Any
from django.conf import settings
from django.core.cache import cache

logger = logging.getLogger(__name__)

class TimeoutHandler:
    """
    Gestionnaire de timeout avec retry intelligent et fallback
    """
    
    def __init__(self):
        self.max_retries = 3
        self.base_timeout = 30  # Timeout de base en secondes
        self.backoff_factor = 2  # Facteur d'augmentation du d√©lai entre les retries
        self.max_timeout = 60   # Timeout maximum
        
    def execute_with_retry(self, func, *args, **kwargs) -> Tuple[bool, str, Optional[str]]:
        """
        Ex√©cute une fonction avec syst√®me de retry automatique
        
        Args:
            func: Fonction √† ex√©cuter (g√©n√©ralement un appel API)
            *args, **kwargs: Arguments pour la fonction
            
        Returns:
            Tuple[bool, str, Optional[str]]: (succ√®s, message, message_id)
        """
        last_error = None
        
        for attempt in range(self.max_retries + 1):
            try:
                # Calculer le timeout pour cette tentative
                timeout = min(self.base_timeout * (self.backoff_factor ** attempt), self.max_timeout)
                
                logger.info(f"üîÑ Tentative {attempt + 1}/{self.max_retries + 1} (timeout: {timeout}s)")
                
                # Ex√©cuter la fonction avec le timeout adaptatif
                if 'timeout' in kwargs:
                    kwargs['timeout'] = timeout
                
                result = func(*args, **kwargs)
                
                # Si on arrive ici, c'est un succ√®s
                if attempt > 0:
                    logger.info(f"‚úÖ Succ√®s apr√®s {attempt + 1} tentatives")
                
                return result
                
            except requests.exceptions.Timeout as e:
                last_error = f"Timeout apr√®s {timeout}s (tentative {attempt + 1})"
                logger.warning(f"‚è±Ô∏è {last_error}")
                
                # Attendre avant le retry (sauf pour la derni√®re tentative)
                if attempt < self.max_retries:
                    wait_time = (attempt + 1) * 2  # 2s, 4s, 6s
                    logger.info(f"‚è≥ Attente {wait_time}s avant retry...")
                    time.sleep(wait_time)
                    
            except requests.exceptions.ConnectionError as e:
                last_error = f"Erreur de connexion (tentative {attempt + 1})"
                logger.warning(f"üîå {last_error}")
                
                if attempt < self.max_retries:
                    wait_time = (attempt + 1) * 3  # 3s, 6s, 9s
                    time.sleep(wait_time)
                    
            except Exception as e:
                last_error = f"Erreur inattendue: {str(e)}"
                logger.error(f"‚ùå {last_error}")
                break  # Pas de retry pour les autres erreurs
        
        # Si on arrive ici, tous les retries ont √©chou√©
        logger.error(f"üí• √âchec d√©finitif apr√®s {self.max_retries + 1} tentatives: {last_error}")
        return False, f"√âchec apr√®s {self.max_retries + 1} tentatives - {last_error}", None
    
    def check_service_health(self, base_url: str) -> bool:
        """
        V√©rifie la sant√© du service WaChap
        
        Args:
            base_url: URL de base de l'API WaChap
            
        Returns:
            bool: True si le service r√©pond
        """
        try:
            response = requests.get(f"{base_url}", timeout=10)
            return response.status_code == 200
        except Exception:
            return False
    
    def get_fallback_config(self, original_region: str) -> Optional[str]:
        """
        Retourne une r√©gion de fallback en cas d'√©chec
        
        Args:
            original_region: R√©gion originale qui a √©chou√©
            
        Returns:
            str: R√©gion de fallback ou None
        """
        fallback_map = {
            'system': 'chine',  # Si syst√®me √©choue ‚Üí Chine
            'mali': 'chine',    # Si Mali √©choue ‚Üí Chine  
            'chine': 'system'   # Si Chine √©choue ‚Üí Syst√®me
        }
        
        fallback = fallback_map.get(original_region)
        if fallback:
            logger.info(f"üîÑ Fallback: {original_region} ‚Üí {fallback}")
            
        return fallback

class CircuitBreaker:
    """
    Impl√©mente un circuit breaker pour √©viter les appels r√©p√©t√©s vers un service d√©faillant
    """
    
    def __init__(self, failure_threshold: int = 5, recovery_timeout: int = 300):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
    
    def is_circuit_open(self, service_key: str) -> bool:
        """
        V√©rifie si le circuit est ouvert pour un service
        """
        cache_key = f"circuit_breaker_{service_key}"
        circuit_data = cache.get(cache_key, {'failures': 0, 'last_failure': None})
        
        # Si pas assez d'√©checs, circuit ferm√©
        if circuit_data['failures'] < self.failure_threshold:
            return False
            
        # Si timeout de r√©cup√©ration d√©pass√©, essayer de fermer le circuit
        if circuit_data['last_failure']:
            time_since_failure = time.time() - circuit_data['last_failure']
            if time_since_failure > self.recovery_timeout:
                logger.info(f"üîì Circuit breaker: tentative de r√©cup√©ration pour {service_key}")
                # Reset partiel pour permettre un test
                circuit_data['failures'] = self.failure_threshold - 1
                cache.set(cache_key, circuit_data, timeout=3600)
                return False
        
        logger.warning(f"‚ö†Ô∏è Circuit breaker OUVERT pour {service_key}")
        return True
    
    def record_success(self, service_key: str):
        """Enregistre un succ√®s - ferme le circuit"""
        cache_key = f"circuit_breaker_{service_key}"
        cache.delete(cache_key)
        logger.info(f"‚úÖ Circuit breaker ferm√© pour {service_key}")
    
    def record_failure(self, service_key: str):
        """Enregistre un √©chec"""
        cache_key = f"circuit_breaker_{service_key}"
        circuit_data = cache.get(cache_key, {'failures': 0, 'last_failure': None})
        
        circuit_data['failures'] += 1
        circuit_data['last_failure'] = time.time()
        
        cache.set(cache_key, circuit_data, timeout=3600)
        
        if circuit_data['failures'] >= self.failure_threshold:
            logger.warning(f"üö® Circuit breaker OUVERT pour {service_key} ({circuit_data['failures']} √©checs)")

# Instances globales
timeout_handler = TimeoutHandler()
circuit_breaker = CircuitBreaker()
