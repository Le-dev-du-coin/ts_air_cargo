"""
Django settings for ts_air_cargo project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-ts-air-cargo-default-key-change-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    
    # Third party apps
    'corsheaders',
    'widget_tweaks',
    
    # TS Air Cargo Applications
    'authentication',
    'whatsapp_monitoring_app',  # App centralisée pour le monitoring WhatsApp
    'admin_chine_app',
    'admin_mali_app',
    'agent_chine_app',
    'agent_mali_app',
    'client_app',
    'notifications_app',
    'reporting_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ts_air_cargo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ts_air_cargo.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Africa/Bamako'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'authentication.CustomUser'

# Login/Logout URLs - Configuration pour authentification par rôle
# URL par défaut pour login si utilisateur non authentifié
LOGIN_URL = '/authentication/login/'

# URL de redirection après login - Remplacée par logique personnalisée dans get_dashboard_url_by_role()
# Cette valeur sera ignorée car nous utilisons notre système de redirection personnalisé
LOGIN_REDIRECT_URL = '/authentication/'

# URL de redirection après logout - Redirige vers la page d'accueil authentication
LOGOUT_REDIRECT_URL = '/authentication/'

# Email Configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@ts-aircargo.com')

# WaChap Configuration - Instance Chine
WACHAP_CHINE_ACCESS_TOKEN = os.getenv('WACHAP_CHINE_ACCESS_TOKEN', '')
WACHAP_CHINE_INSTANCE_ID = os.getenv('WACHAP_CHINE_INSTANCE_ID', '')
WACHAP_CHINE_WEBHOOK_URL = os.getenv('WACHAP_CHINE_WEBHOOK_URL', '')
WACHAP_CHINE_ACTIVE = os.getenv('WACHAP_CHINE_ACTIVE', 'False').lower() == 'true'

# WaChap Configuration - Instance Mali
WACHAP_MALI_ACCESS_TOKEN = os.getenv('WACHAP_MALI_ACCESS_TOKEN', '')
WACHAP_MALI_INSTANCE_ID = os.getenv('WACHAP_MALI_INSTANCE_ID', '')
WACHAP_MALI_WEBHOOK_URL = os.getenv('WACHAP_MALI_WEBHOOK_URL', '')
WACHAP_MALI_ACTIVE = os.getenv('WACHAP_MALI_ACTIVE', 'False').lower() == 'true'

# WaChap Configuration - Instance Système
WACHAP_SYSTEM_ACCESS_TOKEN = os.getenv('WACHAP_SYSTEM_ACCESS_TOKEN', '')
WACHAP_SYSTEM_INSTANCE_ID = os.getenv('WACHAP_SYSTEM_INSTANCE_ID', '')
WACHAP_SYSTEM_WEBHOOK_URL = os.getenv('WACHAP_SYSTEM_WEBHOOK_URL', '')
WACHAP_SYSTEM_ACTIVE = os.getenv('WACHAP_SYSTEM_ACTIVE', 'False').lower() == 'true'

# Admin Configuration
ADMIN_EMAIL = os.getenv('ADMIN_EMAIL', '')
ADMIN_PHONE = os.getenv('ADMIN_PHONE', '')
ADMIN_NAME = os.getenv('ADMIN_NAME', 'Administrateur')

# Alert System Configuration
ALERT_SYSTEM_ENABLED = os.getenv('ALERT_SYSTEM_ENABLED', 'False').lower() == 'true'
ALERT_EMAIL_ENABLED = os.getenv('ALERT_EMAIL_ENABLED', 'False').lower() == 'true'
ALERT_WHATSAPP_ENABLED = os.getenv('ALERT_WHATSAPP_ENABLED', 'False').lower() == 'true'

# Alert Thresholds
ALERT_FAILED_OTP_THRESHOLD = int(os.getenv('ALERT_FAILED_OTP_THRESHOLD', '10'))
ALERT_WHATSAPP_FAILURE_THRESHOLD = int(os.getenv('ALERT_WHATSAPP_FAILURE_THRESHOLD', '5'))
ALERT_DB_ERROR_THRESHOLD = int(os.getenv('ALERT_DB_ERROR_THRESHOLD', '3'))

# Email Report Recipients
EMAIL_REPORT_RECIPIENTS = os.getenv('EMAIL_REPORT_RECIPIENTS', '').split(',')

# === CELERY CONFIGURATION ===
# Celery Settings pour tâches asynchrones
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Configuration des tâches
CELERY_TASK_ROUTES = {
    'agent_chine_app.tasks.create_colis_async': {'queue': 'colis_processing'},
    'agent_chine_app.tasks.update_colis_async': {'queue': 'colis_processing'},
    'notifications_app.tasks.*': {'queue': 'notifications'},
}

# Limites de workers
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes

# Configuration Beat pour tâches périodiques
CELERY_BEAT_SCHEDULE = {
    'retry-failed-tasks': {
        'task': 'agent_chine_app.tasks.retry_failed_tasks',
        'schedule': 300.0,  # Toutes les 5 minutes
    },
    'cleanup-old-tasks': {
        'task': 'agent_chine_app.tasks.cleanup_old_tasks',
        'schedule': 86400.0 * 7,  # Une fois par semaine
    },
}


# Session Configuration
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Security Settings for Production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_TASK_ALWAYS_EAGER = os.getenv('CELERY_TASK_ALWAYS_EAGER', 'False').lower() == 'true'
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True

# CORS Configuration
# En développement, permettre toutes les origines
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    # Exécuter les tâches Celery en mode synchrone pour le DEV (pas besoin de worker)
    CELERY_TASK_ALWAYS_EAGER = True
else:
    # En production, spécifier les domaines autorisés
    CORS_ALLOWED_ORIGINS = [
        "https://ts-aircargo.com",
        "https://www.ts-aircargo.com",
        "https://admin.ts-aircargo.com",
    ]
    CORS_ALLOW_CREDENTIALS = True

# Headers autorisés pour les requêtes CORS
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Méthodes HTTP autorisées
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '%(asctime)s %(name)s %(levelname)s %(message)s',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django_error.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'maxBytes': 1024*1024*5,  # 5MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'transferts_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'transferts.log',
            'maxBytes': 1024*1024*20,  # 20MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_file', 'file_error', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file_error', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
        'ts_air_cargo': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'authentication': {
            'handlers': ['security_file', 'file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'admin_mali_app': {
            'handlers': ['transferts_file', 'file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'admin_chine_app': {
            'handlers': ['transferts_file', 'file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'notifications_app': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'celery.task': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
    'root': {
        'level': 'WARNING',
        'handlers': ['console', 'file'],
    },
}
