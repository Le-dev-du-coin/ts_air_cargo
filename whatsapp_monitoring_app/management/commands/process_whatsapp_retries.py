"""
Commande Django centralis√©e pour traiter les messages WhatsApp en attente de retry
Utilisable pour toutes les apps ou pour une app sp√©cifique
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from whatsapp_monitoring_app.services import WhatsAppMonitoringService, WhatsAppRetryTask
from whatsapp_monitoring_app.models import WhatsAppMessageAttempt
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Traite les messages WhatsApp en attente de retry (toutes apps ou app sp√©cifique)'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--source-app',
            type=str,
            help='Filtrer par app source (agent_chine, agent_mali, admin_chine, admin_mali, etc.)'
        )
        
        parser.add_argument(
            '--max-retries',
            type=int,
            default=50,
            help='Nombre maximum de messages √† traiter par ex√©cution (d√©faut: 50)'
        )
        
        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='Nettoie √©galement les anciennes tentatives'
        )
        
        parser.add_argument(
            '--cleanup-days',
            type=int,
            default=30,
            help='√Çge en jours des tentatives √† supprimer lors du nettoyage (d√©faut: 30)'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simulation sans envoi r√©el de messages'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Affichage d√©taill√© des op√©rations'
        )
        
        parser.add_argument(
            '--list-apps',
            action='store_true',
            help='Affiche les statistiques par app source'
        )
    
    def handle(self, *args, **options):
        start_time = timezone.now()
        
        if options['list_apps']:
            self._list_app_stats()
            return
        
        source_app = options['source_app']
        
        if source_app:
            self.stdout.write(
                self.style.SUCCESS(f'[{start_time}] D√©marrage du traitement des retries WhatsApp pour {source_app}')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS(f'[{start_time}] D√©marrage du traitement des retries WhatsApp (toutes apps)')
            )
        
        try:
            if options['dry_run']:
                self.stdout.write(
                    self.style.WARNING('Mode simulation activ√© - Aucun message ne sera envoy√©')
                )
                stats = self._dry_run_stats(options['max_retries'], source_app)
            else:
                # Traitement normal des retries
                stats = WhatsAppMonitoringService.process_pending_retries(
                    source_app=source_app,
                    max_retries_per_run=options['max_retries']
                )
            
            # Afficher les statistiques
            self._display_stats(stats, options['verbose'], source_app)
            
            # Nettoyage si demand√©
            if options['cleanup']:
                self.stdout.write('\nNettoyage des anciennes tentatives...')
                deleted_count = WhatsAppRetryTask.cleanup_old_attempts(
                    days_old=options['cleanup_days']
                )
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ {deleted_count} anciennes tentatives supprim√©es '
                        f'(plus de {options["cleanup_days"]} jours)'
                    )
                )
            
            # Dur√©e totale
            end_time = timezone.now()
            duration = (end_time - start_time).total_seconds()
            
            self.stdout.write(
                self.style.SUCCESS(
                    f'\n[{end_time}] Traitement termin√© en {duration:.2f} secondes'
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erreur lors du traitement: {str(e)}')
            )
            logger.error(f"Erreur commande process_whatsapp_retries: {str(e)}")
            raise
    
    def _list_app_stats(self):
        """
        Affiche les statistiques par app source
        """
        self.stdout.write(self.style.SUCCESS('üìä STATISTIQUES PAR APP SOURCE'))
        self.stdout.write('='*60)
        
        # R√©cup√©rer toutes les apps sources avec des tentatives
        app_sources = WhatsAppMessageAttempt.objects.values_list('source_app', flat=True).distinct()
        
        for app_source in sorted(app_sources):
            stats = WhatsAppMonitoringService.get_monitoring_stats(source_app=app_source, days_back=7)
            
            self.stdout.write(f'\nüîπ {app_source.upper()}:')
            self.stdout.write(f'   Total (7j): {stats.get("total", 0)}')
            self.stdout.write(f'   Succ√®s: {stats.get("sent", 0) + stats.get("delivered", 0)} ({stats.get("success_rate", 0):.1f}%)')
            self.stdout.write(f'   En retry: {stats.get("failed_retry", 0)}')
            self.stdout.write(f'   √âchecs d√©finitifs: {stats.get("failed_final", 0)}')
        
        # Messages pr√™ts pour retry maintenant par app
        self.stdout.write('\nüîÑ MESSAGES PR√äTS POUR RETRY:')
        for app_source in sorted(app_sources):
            ready_count = WhatsAppMessageAttempt.get_pending_retries(source_app=app_source).count()
            if ready_count > 0:
                self.stdout.write(f'   {app_source}: {ready_count} messages')
    
    def _dry_run_stats(self, max_retries, source_app=None):
        """
        Simulation pour compter les messages qui seraient trait√©s
        """
        pending_attempts = WhatsAppMessageAttempt.get_pending_retries(source_app=source_app)[:max_retries]
        
        stats = {
            'processed': len(pending_attempts),
            'success': 0,
            'failed': 0,
            'errors': []
        }
        
        if pending_attempts:
            app_filter = f" pour {source_app}" if source_app else ""
            self.stdout.write(f'Messages qui seraient trait√©s{app_filter}:')
            
            # Grouper par source_app pour l'affichage
            from collections import defaultdict
            apps_count = defaultdict(int)
            
            for i, attempt in enumerate(pending_attempts[:10], 1):  # Afficher les 10 premiers
                self.stdout.write(
                    f'  {i}. [{attempt.source_app}] {attempt.phone_number} - {attempt.get_message_type_display()} '
                    f'(tentative {attempt.attempt_count}/{attempt.max_attempts})'
                )
                apps_count[attempt.source_app] += 1
            
            if len(pending_attempts) > 10:
                self.stdout.write(f'  ... et {len(pending_attempts) - 10} autres')
            
            # R√©sum√© par app
            if len(apps_count) > 1:
                self.stdout.write('\nR√©partition par app:')
                for app, count in sorted(apps_count.items()):
                    self.stdout.write(f'  {app}: {count} messages')
        
        return stats
    
    def _display_stats(self, stats, verbose=False, source_app=None):
        """
        Affiche les statistiques de traitement
        """
        self.stdout.write('\n' + '='*50)
        if source_app:
            self.stdout.write(f'STATISTIQUES DE TRAITEMENT - {source_app.upper()}')
        else:
            self.stdout.write('STATISTIQUES DE TRAITEMENT - TOUTES APPS')
        self.stdout.write('='*50)
        
        # Statistiques principales
        self.stdout.write(f'üìä Messages trait√©s: {stats["processed"]}')
        
        if stats['processed'] > 0:
            success_rate = (stats['success'] / stats['processed']) * 100
            self.stdout.write(f'‚úÖ Succ√®s: {stats["success"]} ({success_rate:.1f}%)')
            self.stdout.write(f'‚ùå √âchecs: {stats["failed"]}')
            
            # D√©tail des erreurs si verbose
            if verbose and stats['errors']:
                self.stdout.write('\nErreurs d√©taill√©es:')
                for error in stats['errors'][:10]:  # Limiter √† 10 erreurs
                    self.stdout.write(f'  ‚Ä¢ {error}')
                
                if len(stats['errors']) > 10:
                    self.stdout.write(f'  ... et {len(stats["errors"]) - 10} autres erreurs')
        else:
            self.stdout.write('‚ÑπÔ∏è  Aucun message en attente de retry')
        
        # Statistiques syst√®me si verbose
        if verbose:
            self._display_system_stats(source_app)
    
    def _display_system_stats(self, source_app=None):
        """
        Affiche des statistiques syst√®me d√©taill√©es
        """
        self.stdout.write('\n' + '-'*30)
        if source_app:
            self.stdout.write(f'√âTAT DU SYST√àME - {source_app.upper()}')
        else:
            self.stdout.write('√âTAT DU SYST√àME - GLOBAL')
        self.stdout.write('-'*30)
        
        # Statistiques globales
        stats = WhatsAppMonitoringService.get_monitoring_stats(source_app=source_app, days_back=7)
        
        self.stdout.write(f'Total des tentatives (7j): {stats.get("total", 0)}')
        self.stdout.write(f'En attente: {stats.get("pending", 0)}')
        self.stdout.write(f'Envoy√©s: {stats.get("sent", 0)}')
        self.stdout.write(f'Livr√©s: {stats.get("delivered", 0)}')
        self.stdout.write(f'√âchecs d√©finitifs: {stats.get("failed_final", 0)}')
        self.stdout.write(f'En retry: {stats.get("failed_retry", 0)}')
        
        # Messages pr√™ts pour le prochain retry
        now = timezone.now()
        ready_for_retry = WhatsAppMessageAttempt.get_pending_retries(source_app=source_app).count()
        
        future_retries_query = WhatsAppMessageAttempt.objects.filter(
            status='failed_retry',
            next_retry_at__gt=now
        )
        if source_app:
            future_retries_query = future_retries_query.filter(source_app=source_app)
        future_retries = future_retries_query.count()
        
        self.stdout.write(f'\nProchains retries:')
        self.stdout.write(f'  Pr√™ts maintenant: {ready_for_retry}')
        self.stdout.write(f'  Programm√©s: {future_retries}')
        
        if future_retries > 0:
            # Prochain retry
            next_retry = future_retries_query.order_by('next_retry_at').first()
            
            if next_retry:
                time_until = next_retry.next_retry_at - now
                minutes_until = int(time_until.total_seconds() / 60)
                self.stdout.write(f'  Prochain retry dans: {minutes_until} minutes')
        
        # Statistiques par type de message si pas de filtre app
        if not source_app and stats.get('by_type'):
            self.stdout.write(f'\nPar type de message:')
            for type_stat in stats['by_type'][:5]:  # Top 5
                self.stdout.write(
                    f"  {type_stat['message_type']}: {type_stat['count']} "
                    f"(succ√®s: {type_stat['sent_count']})"
                )


# Fonctions utilitaires pour les cron jobs
def run_whatsapp_retries(source_app=None):
    """
    Fonction utilitaire pour ex√©cuter le traitement depuis un cron job
    
    Args:
        source_app: App source √† traiter (optionnel)
    """
    try:
        stats = WhatsAppMonitoringService.process_pending_retries(source_app=source_app)
        if source_app:
            logger.info(f"Cron WhatsApp retries pour {source_app}: {stats}")
        else:
            logger.info(f"Cron WhatsApp retries (global): {stats}")
        return stats
    except Exception as e:
        logger.error(f"Erreur cron WhatsApp retries: {str(e)}")
        raise

def run_app_specific_retries():
    """
    Fonction pour traiter les retries de chaque app s√©par√©ment
    Utile pour distribuer la charge
    """
    app_sources = WhatsAppMessageAttempt.objects.values_list('source_app', flat=True).distinct()
    results = {}
    
    for app_source in app_sources:
        try:
            stats = run_whatsapp_retries(source_app=app_source)
            results[app_source] = stats
        except Exception as e:
            results[app_source] = {'error': str(e)}
            logger.error(f"Erreur retry pour {app_source}: {str(e)}")
    
    return results