"""
Service OTP asynchrone pour am√©liorer la robustesse et l'exp√©rience utilisateur
G√®re l'envoi d'OTP sans bloquer l'interface et avec retry automatique
"""

from django.core.cache import cache
from django.utils import timezone
from notifications_app.tasks import send_otp_async
import logging
import random
import string

logger = logging.getLogger(__name__)

class AsyncOTPService:
    """Service pour g√©rer l'envoi d'OTP de mani√®re asynchrone"""
    
    @staticmethod
    def generate_otp_code(length=6):
        """G√©n√®re un code OTP al√©atoire"""
        return ''.join(random.choices(string.digits, k=length))
    
    @staticmethod
    def send_otp_async(phone_number, user_id, role=None, extra_data=None):
        """
        Envoie un OTP de mani√®re asynchrone
        
        Args:
            phone_number: Num√©ro de t√©l√©phone destinataire
            user_id: ID de l'utilisateur
            role: R√¥le de l'utilisateur (optionnel)
            extra_data: Donn√©es suppl√©mentaires √† stocker (optionnel)
            
        Returns:
            dict: Statut de la demande avec cl√© cache pour suivi
        """
        try:
            # G√©n√©rer le code OTP
            otp_code = AsyncOTPService.generate_otp_code()
            
            # Cr√©er la cl√© cache unique
            cache_key = f"otp_async_{phone_number}_{int(timezone.now().timestamp())}"
            
            # Stocker les donn√©es OTP en cache avec statut initial
            otp_data = {
                'code': otp_code,
                'user_id': user_id,
                'phone_number': phone_number,
                'role': role,
                'status': 'pending',  # pending -> sending -> sent/failed/failed_final
                'created_at': timezone.now().isoformat(),
                'user_message': 'Envoi du code en cours...',
                'attempts': 0
            }
            
            # Ajouter les donn√©es extra si fournies
            if extra_data:
                otp_data.update(extra_data)
            
            # Sauvegarder en cache (10 minutes)
            cache.set(cache_key, otp_data, timeout=600)
            
            # Lancer la t√¢che asynchrone
            task_result = send_otp_async.delay(
                phone_number=phone_number,
                otp_code=otp_code,
                cache_key=cache_key,
                user_id=user_id
            )
            
            logger.info(f"üì§ OTP asynchrone lanc√© pour {phone_number} - Cache: {cache_key} - Task: {task_result.id}")
            
            return {
                'success': True,
                'cache_key': cache_key,
                'task_id': task_result.id,
                'user_message': 'Envoi du code de v√©rification en cours...',
                'status': 'pending'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lancement OTP asynchrone pour {phone_number}: {e}")
            return {
                'success': False,
                'user_message': 'Erreur lors de la pr√©paration de l\'envoi du code. R√©essayez.',
                'error': str(e)
            }
    
    @staticmethod
    def get_otp_status(cache_key):
        """
        R√©cup√®re le statut actuel d'un OTP
        
        Args:
            cache_key: Cl√© cache de l'OTP
            
        Returns:
            dict: Statut et donn√©es de l'OTP
        """
        otp_data = cache.get(cache_key)
        
        if not otp_data:
            return {
                'found': False,
                'expired': True,
                'user_message': 'Session expir√©e. Veuillez vous reconnecter.'
            }
        
        return {
            'found': True,
            'expired': False,
            'status': otp_data.get('status', 'pending'),
            'user_message': otp_data.get('user_message', 'Statut inconnu'),
            'code': otp_data.get('code'),
            'user_id': otp_data.get('user_id'),
            'phone_number': otp_data.get('phone_number'),
            'role': otp_data.get('role'),
            'attempts': otp_data.get('attempts', 0),
            'created_at': otp_data.get('created_at'),
            'completed_at': otp_data.get('completed_at')
        }
    
    @staticmethod
    def verify_otp(cache_key, entered_code):
        """
        V√©rifie un code OTP
        
        Args:
            cache_key: Cl√© cache de l'OTP
            entered_code: Code saisi par l'utilisateur
            
        Returns:
            dict: R√©sultat de la v√©rification
        """
        otp_data = cache.get(cache_key)
        
        if not otp_data:
            return {
                'success': False,
                'user_message': 'Code expir√©. Veuillez vous reconnecter.',
                'expired': True
            }
        
        stored_code = otp_data.get('code')
        user_id = otp_data.get('user_id')
        
        if entered_code == stored_code:
            # Code correct - nettoyer le cache
            cache.delete(cache_key)
            
            logger.info(f"‚úÖ OTP v√©rifi√© avec succ√®s pour utilisateur {user_id}")
            
            return {
                'success': True,
                'user_message': 'Code v√©rifi√© avec succ√®s',
                'user_id': user_id,
                'user_data': otp_data
            }
        else:
            logger.warning(f"‚ùå Code OTP incorrect pour utilisateur {user_id}")
            
            return {
                'success': False,
                'user_message': 'Code incorrect. V√©rifiez et r√©essayez.',
                'expired': False
            }
    
    @staticmethod
    def cleanup_expired_otps():
        """
        Nettoie les OTP expir√©s (√† appeler p√©riodiquement)
        Cette m√©thode peut √™tre appel√©e par une t√¢che Celery planifi√©e
        """
        # Note: Django cache ne permet pas de lister toutes les cl√©s
        # Cette m√©thode pourrait √™tre impl√©ment√©e avec Redis directement si n√©cessaire
        pass

# Fonctions utilitaires pour compatibilit√©
def send_otp_to_user(phone_number, user_id, role=None, **kwargs):
    """
    Fonction utilitaire pour envoyer un OTP √† un utilisateur
    Compatible avec l'interface existante
    """
    return AsyncOTPService.send_otp_async(
        phone_number=phone_number,
        user_id=user_id,
        role=role,
        extra_data=kwargs
    )

def get_user_friendly_message(raw_message):
    """
    Convertit les messages techniques en messages compr√©hensibles
    """
    if not raw_message:
        return "Erreur inconnue"
    
    raw_lower = raw_message.lower()
    
    if "timeout" in raw_lower:
        return "Service temporairement indisponible. Veuillez patienter..."
    elif "invalid" in raw_lower or "invalid√©" in raw_lower:
        return "Service en maintenance. R√©essayez dans quelques minutes."
    elif "network" in raw_lower or "connexion" in raw_lower:
        return "Probl√®me de connexion. V√©rifiez votre connexion internet."
    elif "wachap" in raw_lower:
        return "Service de messagerie temporairement indisponible"
    else:
        return "Probl√®me temporaire. Nos √©quipes travaillent √† le r√©soudre."