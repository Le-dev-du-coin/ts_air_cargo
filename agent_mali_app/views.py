from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Count, Sum, Q, Avg
from django.http import JsonResponse, HttpResponseForbidden, HttpResponse
from django.views.decorators.http import require_http_methods
from django.utils import timezone
from datetime import datetime, timedelta, date
from django.core.paginator import Paginator
from django.db import transaction
import json

from .models import Depense, ReceptionLot, Livraison
from agent_chine_app.models import Lot, Colis, Client
from notifications_app.services import NotificationService
from django.contrib.auth import get_user_model

User = get_user_model()

# D√©corateur pour v√©rifier que l'utilisateur est un agent mali
def agent_mali_required(view_func):
    def wrapper(request, *args, **kwargs):
        if not request.user.is_authenticated or not request.user.is_agent_mali:
            messages.error(request, "Acc√®s refus√©. Vous devez √™tre un agent au Mali.")
            return redirect('authentication:login')
        return view_func(request, *args, **kwargs)
    return wrapper

@agent_mali_required
def dashboard_view(request):
    """
    Tableau de bord pour Agent Mali avec statistiques temps r√©el
    """
    # Statistiques des lots - inclure les lots exp√©di√©s comme en transit pour l'agent Mali
    lots_en_transit = Lot.objects.filter(statut__in=['expedie', 'en_transit']).count()
    lots_arrives = Lot.objects.filter(statut='arrive').count()
    lots_expedies_total = Lot.objects.filter(statut='expedie').count()
    
    # Statistiques des colis - inclure les colis exp√©di√©s comme en transit pour l'agent Mali
    colis_en_transit = Colis.objects.filter(statut__in=['expedie', 'en_transit']).count()
    colis_arrives = Colis.objects.filter(statut='arrive').count()
    colis_livres = Colis.objects.filter(statut='livre').count()
    colis_perdus = Colis.objects.filter(statut='perdu').count()
    
    # Statistiques de livraison aujourd'hui
    aujourd_hui = timezone.now().date()
    livraisons_aujourd_hui = Livraison.objects.filter(
        date_livraison_effective__date=aujourd_hui,
        statut='livree'
    ).count()
    
    # Calculs de revenus et d√©penses du mois
    debut_mois = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    # Revenus bas√©s sur le prix de transport des colis livr√©s ce mois
    revenus_livraison_mois = Colis.objects.filter(
        statut='livre',
        livraisons__date_livraison_effective__gte=debut_mois,
        livraisons__statut='livree'
    ).aggregate(total=Sum('prix_calcule'))['total'] or 0
    
    # Revenus journaliers (colis livr√©s aujourd'hui)
    revenus_livraison_aujourd_hui = Colis.objects.filter(
        statut='livre',
        livraisons__date_livraison_effective__date=aujourd_hui,
        livraisons__statut='livree'
    ).aggregate(total=Sum('prix_calcule'))['total'] or 0
    
    # Valeur totale des colis en stock (arriv√©s mais pas encore livr√©s)
    valeur_stock_magasin = Colis.objects.filter(
        statut='arrive'
    ).aggregate(total=Sum('prix_calcule'))['total'] or 0
    
    # D√©penses du mois
    depenses_mois = Depense.objects.filter(
        date_depense__gte=debut_mois.date()
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    # Calcul du b√©n√©fice mensuel
    benefice_mois = float(revenus_livraison_mois) - float(depenses_mois)
    
    # Derniers lots re√ßus - inclure les lots exp√©di√©s et en transit
    derniers_lots_recus = Lot.objects.filter(
        statut__in=['arrive', 'en_transit', 'expedie']
    ).order_by('-date_expedition')[:5]
    
    # Derni√®res livraisons
    dernieres_livraisons = Livraison.objects.filter(
        statut='livree'
    ).select_related('colis__client__user').order_by('-date_livraison_effective')[:5]
    
    # Colis √† livrer (priorit√©)
    colis_a_livrer = Colis.objects.filter(
        statut='arrive'
    ).select_related('client__user', 'lot').count()
    
    # Colis livr√©s en attente de paiement
    colis_attente_paiement = Colis.objects.filter(
        statut='livre',
        livraisons__statut='livree',
        livraisons__statut_paiement='en_attente'
    ).distinct().count()
    
    # Debug: imprimer la valeur pour v√©rifier
    print(f"DEBUG - Colis en attente de paiement: {colis_attente_paiement}")
    
    context = {
        'stats': {
            'lots_en_transit': lots_en_transit,
            'lots_arrives': lots_arrives,
            'lots_expedies_total': lots_expedies_total,
            'colis_en_transit': colis_en_transit,
            'colis_arrives': colis_arrives,
            'colis_livres': colis_livres,
            'colis_perdus': colis_perdus,
            'livraisons_aujourd_hui': livraisons_aujourd_hui,
            'revenus_livraison_mois': float(revenus_livraison_mois),
            'revenus_livraison_aujourd_hui': float(revenus_livraison_aujourd_hui),
            'valeur_stock_magasin': float(valeur_stock_magasin),
            'depenses_mois': float(depenses_mois),
            'benefice_mois': benefice_mois,
            'colis_a_livrer': colis_a_livrer,
            'colis_attente_paiement': colis_attente_paiement,
        },
        'derniers_lots_recus': derniers_lots_recus,
        'dernieres_livraisons': dernieres_livraisons,
    }
    return render(request, 'agent_mali_app/dashboard.html', context)

@agent_mali_required
def colis_attente_paiement_view(request):
    """
    Vue pour g√©rer les colis livr√©s en attente de paiement
    """
    colis_attente = Colis.objects.filter(
        statut='livre',
        livraisons__statut='livree',
        livraisons__statut_paiement='en_attente'
    ).select_related(
        'client__user', 'lot'
    ).prefetch_related('livraisons').distinct().order_by('-livraisons__date_livraison_effective')
    
    context = {
        'colis_attente': colis_attente,
        'title': 'Colis en Attente de Paiement',
    }
    return render(request, 'agent_mali_app/colis_attente_paiement.html', context)

@agent_mali_required
def marquer_paiement_view(request, colis_id):
    """
    Marquer un colis comme pay√©
    """
    if request.method == 'POST':
        colis = get_object_or_404(Colis, id=colis_id, statut='livre')
        
        # Mettre √† jour toutes les livraisons de ce colis
        livraisons = colis.livraisons.filter(
            statut='livree',
            statut_paiement='en_attente'
        )
        
        if livraisons.exists():
            livraisons.update(statut_paiement='paye')
            messages.success(
                request, 
                f"‚úÖ Colis {colis.numero_suivi} marqu√© comme pay√©."
            )
        else:
            messages.warning(
                request,
                f"‚ö†Ô∏è Aucune livraison en attente de paiement pour ce colis."
            )
    
    return redirect('agent_mali:colis_attente_paiement')

@agent_mali_required
def marquer_perdu_view(request, colis_id):
    """
    Marquer un colis comme perdu
    """
    if request.method == 'POST':
        colis = get_object_or_404(Colis, id=colis_id, statut='arrive')
        
        try:
            raison_perte = request.POST.get('raison_perte')
            commentaire = request.POST.get('commentaire', '')
            notifier_client = request.POST.get('notifier_client') == 'on'
            
            # Mettre √† jour le statut du colis
            colis.statut = 'perdu'
            colis.save()
            
            # Envoyer notification au client si demand√©
            if notifier_client:
                try:
                    from django.conf import settings
                    
                    message = f"""
üòî Information importante concernant votre colis

Bonjour {colis.client.user.get_full_name()},

Nous vous informons malheureusement que votre colis {colis.numero_suivi} a √©t√© marqu√© comme perdu.

üìã Raison: {dict([
    ('transport', 'Perdu pendant le transport'),
    ('vol', 'Vol/Disparition'),
    ('deterioration', 'D√©t√©rioration compl√®te'),
    ('erreur_livraison', 'Erreur de livraison'),
    ('autre', 'Autre raison')
]).get(raison_perte, raison_perte)}

üí¨ D√©tails: {commentaire if commentaire else 'Aucun d√©tail suppl√©mentaire'}

Nous nous excusons sinc√®rement pour ce d√©sagr√©ment. Notre √©quipe va enqu√™ter sur cet incident.

Veuillez nous contacter pour discuter des d√©marches de compensation.

√âquipe TS Air Cargo Mali
üìû Contact: +223 XX XX XX XX
                    """.strip()
                    
                    NotificationService.send_notification(
                        user=colis.client.user,
                        message=message,
                        method='whatsapp',
                        title="Colis Perdu",
                        categorie='colis_perdu'
                    )
                    
                except Exception as notif_error:
                    print(f"Erreur notification perte: {notif_error}")
            
            messages.success(
                request, 
                f"‚ö†Ô∏è Colis {colis.numero_suivi} marqu√© comme perdu. Client notifi√©: {'Oui' if notifier_client else 'Non'}"
            )
            
        except Exception as e:
            messages.error(request, f"‚ùå Erreur lors du marquage comme perdu: {str(e)}")
    
    return redirect('agent_mali:colis_a_livrer')

@agent_mali_required
@require_http_methods(["GET"])
def colis_details_api(request, colis_id):
    """
    API pour r√©cup√©rer les d√©tails d'un colis
    """
    try:
        colis = get_object_or_404(Colis, id=colis_id)
        
        # Informations du colis
        data = {
            'numero_suivi': colis.numero_suivi,
            'description': colis.description,
            'statut': colis.get_statut_display(),
            'type_transport': colis.get_type_transport_display(),
            'poids': float(colis.poids),
            'prix_calcule': float(colis.prix_calcule),
            'date_creation': colis.date_creation.strftime('%d/%m/%Y √† %H:%M'),
            'dimensions': {
                'longueur': float(colis.longueur),
                'largeur': float(colis.largeur),
                'hauteur': float(colis.hauteur),
                'volume_m3': colis.volume_m3()
            },
            'client': {
                'nom': colis.client.user.get_full_name(),
                'telephone': colis.client.user.telephone,
                'email': colis.client.user.email or 'Non renseign√©',
                'adresse': colis.client.adresse,
                'pays': colis.client.get_pays_display()
            },
            'lot': {
                'numero': colis.lot.numero_lot,
                'statut': colis.lot.get_statut_display(),
                'date_expedition': colis.lot.date_expedition.strftime('%d/%m/%Y √† %H:%M') if colis.lot.date_expedition else None,
                'date_arrivee': colis.lot.date_arrivee.strftime('%d/%m/%Y √† %H:%M') if colis.lot.date_arrivee else None,
                'agent_createur': colis.lot.agent_createur.get_full_name() if colis.lot.agent_createur else None
            }
        }
        
        # Informations de livraison si disponibles
        livraison = colis.livraisons.filter(statut='livree').first()
        if livraison:
            # G√©rer le statut de paiement en toute s√©curit√©
            try:
                if hasattr(livraison, 'statut_paiement') and livraison.statut_paiement:
                    statut_paiement = livraison.get_statut_paiement_display()
                else:
                    statut_paiement = 'Non d√©fini'
            except:
                statut_paiement = 'Non d√©fini'
            
            data['livraison'] = {
                'date_livraison': livraison.date_livraison_effective.strftime('%d/%m/%Y √† %H:%M') if livraison.date_livraison_effective else 'Non d√©finie',
                'nom_destinataire': livraison.nom_destinataire or 'Non d√©fini',
                'adresse_livraison': livraison.adresse_livraison or 'Non d√©finie',
                'statut_paiement': statut_paiement,
                'agent_livreur': livraison.agent_livreur.get_full_name() if livraison.agent_livreur else 'Non d√©fini',
                'notes': livraison.notes_livraison or ''
            }
        
        return JsonResponse({
            'success': True,
            'data': data
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@agent_mali_required
def lots_en_transit_view(request):
    """
    Liste des lots en transit venant de Chine (inclut les lots exp√©di√©s)
    """
    lots = Lot.objects.filter(
        statut__in=['expedie', 'en_transit']
    ).select_related('agent_createur').prefetch_related('colis__client__user').order_by('-date_expedition')
    
    # Calculs pour statistiques
    total_colis = sum(lot.colis.count() for lot in lots)
    valeur_transport_total = sum(float(lot.prix_transport or 0) for lot in lots)
    
    context = {
        'lots': lots,
        'total_colis': total_colis,
        'valeur_transport_total': valeur_transport_total,
        'title': 'Lots En Transit',
    }
    return render(request, 'agent_mali_app/lots_en_transit.html', context)

@agent_mali_required
def recevoir_lot_view(request, lot_id):
    """
    R√©ceptionner un lot au Mali avec gestion de la r√©ception partielle
    """
    lot = get_object_or_404(Lot, id=lot_id, statut__in=['expedie', 'en_transit'])
    
    if request.method == 'POST':
        try:
            commentaire = request.POST.get('commentaire', '')
            notifier_clients = request.POST.get('notifier_clients') == 'on'
            
            # R√©cup√©rer les colis s√©lectionn√©s pour r√©ception
            colis_recus_ids = request.POST.getlist('colis_recus')
            
            # Si aucun colis sp√©cifique n'est s√©lectionn√©, 
            # r√©ceptionner seulement les colis pas encore arriv√©s
            if not colis_recus_ids:
                colis_non_arrives = lot.colis.exclude(statut='arrive')
                colis_recus_ids = [str(c.id) for c in colis_non_arrives]
            
            # S'assurer qu'on ne traite que les colis pas encore arriv√©s
            colis_a_recevoir = lot.colis.filter(
                id__in=colis_recus_ids
            ).exclude(statut='arrive')
            
            if not colis_a_recevoir.exists():
                messages.warning(request, "‚ö†Ô∏è Aucun colis nouveau √† r√©ceptionner dans cette s√©lection.")
                return redirect('agent_mali:recevoir_lot', lot_id=lot.id)
            
            # Cr√©er ou r√©cup√©rer l'enregistrement de r√©ception
            reception, created = ReceptionLot.objects.get_or_create(
                lot=lot,
                defaults={
                    'agent_receptionnaire': request.user,
                    'observations': commentaire,
                    'reception_complete': False
                }
            )
            
            # Si l'enregistrement existait d√©j√†, mettre √† jour les observations
            if not created:
                if commentaire:
                    # Ajouter le nouveau commentaire aux observations existantes
                    if reception.observations:
                        reception.observations += f"\n--- R√©ception partielle {timezone.now().strftime('%d/%m/%Y %H:%M')} ---\n{commentaire}"
                    else:
                        reception.observations = commentaire
            
            # Mettre √† jour le statut des colis re√ßus
            colis_a_recevoir.update(statut='arrive')
            
            # V√©rifier si tous les colis du lot sont maintenant arriv√©s
            colis_non_arrives_restants = lot.colis.exclude(statut='arrive')
            
            if not colis_non_arrives_restants.exists():
                # R√©ception compl√®te
                lot.statut = 'arrive'
                reception.reception_complete = True
                reception.colis_manquants.clear()  # Vider la liste des colis manquants
                reception_type = "compl√®te"
                if created:
                    reception_action = "Premi√®re et derni√®re"
                else:
                    reception_action = "Derni√®re"
            else:
                # R√©ception partielle
                lot.statut = 'en_transit'
                reception.reception_complete = False
                reception.colis_manquants.set(colis_non_arrives_restants)
                reception_type = "partielle"
                if created:
                    reception_action = "Premi√®re"
                else:
                    reception_action = "Nouvelle"
            
            lot.date_arrivee = timezone.now()
            lot.save()
            reception.save()
            
            # Envoyer des notifications de masse via t√¢che asynchrone
            colis_recus_count = colis_a_recevoir.count()
            
            print(f"DEBUG - Notification clients activ√©e: {notifier_clients}")
            print(f"DEBUG - Nombre de colis √† notifier: {colis_recus_count}")
            
            if notifier_clients:
                # Utiliser la t√¢che asynchrone pour notifications de masse
                from notifications_app.tasks import send_bulk_lot_notifications
                
                print(f"DEBUG - Lancement de la t√¢che asynchrone pour les notifications...")
                
                try:
                    # Lancer la t√¢che asynchrone
                    task_result = send_bulk_lot_notifications.delay(
                        lot_id=lot.id,
                        notification_type='lot_arrived',
                        initiated_by_id=request.user.id
                    )
                    
                    print(f"DEBUG - T√¢che asynchrone lanc√©e avec ID: {task_result.id}")
                    notifications_envoyees = f"T√¢che asynchrone lanc√©e (ID: {task_result.id})"
                    
                except Exception as async_error:
                    print(f"Erreur lancement t√¢che asynchrone: {async_error}")
                    notifications_envoyees = "Erreur lors du lancement"
            
            if notifier_clients:
                if "T√¢che asynchrone" in str(notifications_envoyees):
                    messages.success(request, f"‚úÖ {reception_action} r√©ception {reception_type} du lot {lot.numero_lot} ! {colis_recus_count} colis re√ßus. Notifications en cours d'envoi...")
                else:
                    messages.success(request, f"‚úÖ {reception_action} r√©ception {reception_type} du lot {lot.numero_lot} ! {colis_recus_count} colis re√ßus. Erreur notifications: {notifications_envoyees}")
            else:
                messages.success(request, f"‚úÖ {reception_action} r√©ception {reception_type} du lot {lot.numero_lot} ! {colis_recus_count} colis re√ßus (notifications d√©sactiv√©es).")
            return redirect('agent_mali:lots_en_transit')
            
        except Exception as e:
            messages.error(request, f"‚ùå Erreur lors de la r√©ception: {str(e)}")
    
    # Calculs pour affichage
    total_colis = lot.colis.count()
    total_poids = sum(float(c.poids) for c in lot.colis.all())
    
    context = {
        'lot': lot,
        'total_colis': total_colis,
        'total_poids': total_poids,
        'title': f'R√©ceptionner le lot {lot.numero_lot}',
    }
    return render(request, 'agent_mali_app/recevoir_lot.html', context)

@agent_mali_required
def colis_a_livrer_view(request):
    """
    Liste des colis arriv√©s au Mali et pr√™ts √† √™tre livr√©s
    """
    colis = Colis.objects.filter(
        statut='arrive'
    ).select_related('client__user', 'lot').order_by('-lot__date_arrivee')
    
    # Filtrage par recherche
    search_query = request.GET.get('search', '')
    if search_query:
        colis = colis.filter(
            Q(numero_suivi__icontains=search_query) |
            Q(client__user__first_name__icontains=search_query) |
            Q(client__user__last_name__icontains=search_query) |
            Q(client__user__telephone__icontains=search_query)
        )
    
    # Calcul de la valeur totale
    valeur_totale = sum(float(c.prix_calcule) for c in colis)
    
    # Calcul du poids total
    poids_total = sum(float(c.poids) for c in colis)
    
    # Calcul des clients uniques
    clients_uniques = colis.values_list('client__id', flat=True).distinct().count()
    
    context = {
        'colis': colis,
        'search_query': search_query,
        'valeur_totale': valeur_totale,
        'poids_total': poids_total,
        'clients_uniques': clients_uniques,
        'title': 'Colis √† Livrer',
    }
    return render(request, 'agent_mali_app/colis_a_livrer.html', context)

@agent_mali_required
def marquer_livre_view(request, colis_id):
    """
    Marquer un colis comme livr√©
    """
    colis = get_object_or_404(Colis, id=colis_id, statut='arrive')
    
    if request.method == 'POST':
        try:
            # R√©cup√©rer les donn√©es du formulaire
            nom_destinataire = request.POST.get('personne_receptrice') or colis.client.user.get_full_name()
            adresse_livraison = request.POST.get('adresse_livraison') or colis.client.adresse or "Adresse non sp√©cifi√©e"
            notes_livraison = request.POST.get('commentaire', '')
            mode_livraison = request.POST.get('mode_livraison')
            statut_paiement = request.POST.get('statut_paiement', 'en_attente')
            
            # Cr√©er l'enregistrement de livraison
            livraison = Livraison.objects.create(
                colis=colis,
                agent_livreur=request.user,
                date_planifiee=timezone.now(),
                date_livraison_effective=timezone.now(),
                statut='livree',
                statut_paiement=statut_paiement,
                adresse_livraison=adresse_livraison,
                telephone_destinataire=colis.client.user.telephone,
                nom_destinataire=nom_destinataire,
                notes_livraison=notes_livraison
            )
            
            # Mettre √† jour le statut du colis
            colis.statut = 'livre'
            colis.save()
            
            # Envoyer notification de livraison
            try:
                from django.conf import settings
                
                if getattr(settings, 'DEBUG', True):
                    message = f"""
‚úÖ [SANDBOX TEST] Colis livr√© avec succ√®s !

üë§ Client: {colis.client.user.get_full_name()}
üìû T√©l√©phone: {colis.client.user.telephone}

üì¶ Colis: {colis.numero_suivi}
üè† Livr√© √†: {nom_destinataire}
üìÖ Date de livraison: {livraison.date_livraison_effective.strftime('%d/%m/%Y √† %H:%M')}

‚úÖ Votre colis a √©t√© livr√© avec succ√®s !
Merci d'avoir choisi TS Air Cargo.

√âquipe TS Air Cargo üöÄ
                    """.strip()
                else:
                    message = f"""
‚úÖ Colis livr√© avec succ√®s !

Votre colis {colis.numero_suivi} a √©t√© livr√© avec succ√®s.

üìÖ Date de livraison: {livraison.date_livraison_effective.strftime('%d/%m/%Y √† %H:%M')}
üè† Livr√© √†: {nom_destinataire}

Merci d'avoir choisi TS Air Cargo !
                    """.strip()
                
                NotificationService.send_notification(
                    user=colis.client.user,
                    message=message,
                    method='whatsapp',
                    title="Colis Livr√©",
                    categorie='colis_livre'
                )
            except Exception as notif_error:
                print(f"Erreur notification livraison: {notif_error}")
            
            messages.success(request, f"‚úÖ Colis {colis.numero_suivi} marqu√© comme livr√© avec succ√®s !")
            return redirect('agent_mali:colis_a_livrer')
            
        except Exception as e:
            messages.error(request, f"‚ùå Erreur lors de la livraison: {str(e)}")
    
    context = {
        'colis': colis,
        'title': f'Livrer le colis {colis.numero_suivi}',
    }
    return render(request, 'agent_mali_app/marquer_livre.html', context)

@agent_mali_required
def depenses_view(request):
    """
    Liste et gestion des d√©penses avec statistiques avanc√©es
    """
    # Base queryset
    depenses = Depense.objects.filter(agent=request.user).order_by('-date_depense')
    
    # Filtres
    search_query = request.GET.get('search', '')
    categorie_filter = request.GET.get('categorie', '')
    date_debut = request.GET.get('date_debut', '')
    date_fin = request.GET.get('date_fin', '')
    montant_min = request.GET.get('montant_min', '')
    
    # Application des filtres
    if search_query:
        depenses = depenses.filter(
            Q(libelle__icontains=search_query) |
            Q(notes__icontains=search_query) |
            Q(montant__icontains=search_query)
        )
    
    if categorie_filter:
        depenses = depenses.filter(type_depense=categorie_filter)
    
    if date_debut:
        depenses = depenses.filter(date_depense__gte=date_debut)
    
    if date_fin:
        depenses = depenses.filter(date_depense__lte=date_fin)
    
    if montant_min:
        try:
            depenses = depenses.filter(montant__gte=float(montant_min))
        except ValueError:
            pass
    
    # Calcul des statistiques
    aujourd_hui = date.today()
    debut_mois = aujourd_hui.replace(day=1)
    debut_semaine = aujourd_hui - timedelta(days=aujourd_hui.weekday())
    
    # Totaux par p√©riode
    total_mois = Depense.objects.filter(
        agent=request.user,
        date_depense__gte=debut_mois
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    total_semaine = Depense.objects.filter(
        agent=request.user,
        date_depense__gte=debut_semaine
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    # Moyenne journali√®re (30 derniers jours)
    debut_30j = aujourd_hui - timedelta(days=30)
    total_30j = Depense.objects.filter(
        agent=request.user,
        date_depense__gte=debut_30j
    ).aggregate(total=Sum('montant'))['total'] or 0
    moyenne_journaliere = total_30j / 30
    
    # Pagination
    paginator = Paginator(depenses, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'depenses': page_obj,
        'page_obj': page_obj,
        'is_paginated': page_obj.has_other_pages(),
        'total_mois': float(total_mois),
        'total_semaine': float(total_semaine),
        'moyenne_journaliere': float(moyenne_journaliere),
        'search_query': search_query,
        'categorie_filter': categorie_filter,
        'date_debut': date_debut,
        'date_fin': date_fin,
        'montant_min': montant_min,
        'title': 'Gestion des D√©penses',
    }
    return render(request, 'agent_mali_app/depenses.html', context)

@agent_mali_required
def depense_create_view(request):
    """
    Cr√©er une nouvelle d√©pense
    """
    if request.method == 'POST':
        try:
            # R√©cup√©rer les donn√©es du formulaire
            libelle = request.POST.get('libelle')
            type_depense = request.POST.get('type_depense')
            montant = request.POST.get('montant')
            date_depense = request.POST.get('date_depense')
            notes = request.POST.get('notes', '')
            justificatif = request.FILES.get('justificatif')
            
            # Cr√©er la d√©pense
            depense = Depense.objects.create(
                libelle=libelle,
                type_depense=type_depense,
                montant=float(montant),
                date_depense=date_depense,
                agent=request.user,
                notes=notes,
                justificatif=justificatif
            )
            
            messages.success(request, f"‚úÖ D√©pense '{libelle}' enregistr√©e avec succ√®s !")
            return redirect('agent_mali:depenses')
            
        except Exception as e:
            messages.error(request, f"‚ùå Erreur lors de l'enregistrement: {str(e)}")
    
    # Statistiques pour le sidebar
    aujourd_hui = date.today()
    debut_mois = aujourd_hui.replace(day=1)
    
    total_mois_actuel = Depense.objects.filter(
        agent=request.user,
        date_depense__gte=debut_mois
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    nombre_depenses_mois = Depense.objects.filter(
        agent=request.user,
        date_depense__gte=debut_mois
    ).count()
    
    moyenne_depense_mois = total_mois_actuel / nombre_depenses_mois if nombre_depenses_mois > 0 else 0
    
    dernieres_depenses = Depense.objects.filter(
        agent=request.user
    ).order_by('-date_depense')[:5]
    
    context = {
        'title': 'Nouvelle D√©pense',
        'type_choices': Depense.TYPE_DEPENSE_CHOICES,
        'total_mois_actuel': float(total_mois_actuel),
        'nombre_depenses_mois': nombre_depenses_mois,
        'moyenne_depense_mois': float(moyenne_depense_mois),
        'dernieres_depenses': dernieres_depenses,
    }
    return render(request, 'agent_mali_app/nouvelle_depense.html', context)

@agent_mali_required
def nouvelle_depense_view(request):
    """
    Cr√©er une nouvelle d√©pense - alias pour depense_create_view
    """
    return depense_create_view(request)


@agent_mali_required
def depense_edit_view(request, depense_id):
    """
    Modifier une d√©pense existante
    """
    depense = get_object_or_404(Depense, id=depense_id, agent=request.user)
    
    if request.method == 'POST':
        try:
            # R√©cup√©rer les donn√©es du formulaire
            libelle = request.POST.get('libelle')
            type_depense = request.POST.get('type_depense')
            montant = request.POST.get('montant')
            date_depense = request.POST.get('date_depense')
            notes = request.POST.get('notes', '')
            justificatif = request.FILES.get('justificatif')
            
            # Mettre √† jour la d√©pense
            depense.libelle = libelle
            depense.type_depense = type_depense
            depense.montant = float(montant)
            depense.date_depense = date_depense
            depense.notes = notes
            
            # Mettre √† jour le justificatif si fourni
            if justificatif:
                depense.justificatif = justificatif
            
            depense.save()
            
            messages.success(request, f"‚úÖ D√©pense '{libelle}' modifi√©e avec succ√®s !")
            return redirect('agent_mali:depenses')
            
        except Exception as e:
            messages.error(request, f"‚ùå Erreur lors de la modification: {str(e)}")
    
    context = {
        'depense': depense,
        'title': f'Modifier D√©pense - {depense.libelle}',
        'type_choices': Depense.TYPE_DEPENSE_CHOICES,
    }
    return render(request, 'agent_mali_app/depense_form.html', context)

@agent_mali_required
def depense_delete_view(request, depense_id):
    """
    Supprimer une d√©pense
    """
    depense = get_object_or_404(Depense, id=depense_id, agent=request.user)
    
    if request.method == 'POST':
        libelle = depense.libelle
        depense.delete()
        messages.success(request, f"‚úÖ D√©pense '{libelle}' supprim√©e avec succ√®s !")
        return redirect('agent_mali:depenses')
    
    return redirect('agent_mali:depenses')

@agent_mali_required
def depense_detail_view(request, depense_id):
    """
    Afficher les d√©tails d'une d√©pense
    """
    depense = get_object_or_404(Depense, id=depense_id, agent=request.user)
    
    context = {
        'depense': depense,
        'title': f'D√©tails - {depense.libelle}',
    }
    return render(request, 'agent_mali_app/depense_detail.html', context)

@agent_mali_required
def rapports_view(request):
    """
    Interface de g√©n√©ration de rapports
    """
    # Statistiques du jour pour affichage
    aujourd_hui = date.today()
    
    # Lots re√ßus aujourd'hui
    lots_recus_aujourd_hui = ReceptionLot.objects.filter(
        date_reception__date=aujourd_hui
    ).count()
    
    # Colis livr√©s aujourd'hui
    colis_livres_aujourd_hui = Livraison.objects.filter(
        date_livraison_effective__date=aujourd_hui,
        statut='livree'
    ).count()
    
    # D√©penses du jour
    depenses_total_aujourd_hui = Depense.objects.filter(
        agent=request.user,
        date_depense=aujourd_hui
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    # Clients notifi√©s aujourd'hui (approximation)
    clients_notifies_aujourd_hui = lots_recus_aujourd_hui + colis_livres_aujourd_hui
    
    # Revenus de livraison aujourd'hui
    revenus_livraison_aujourd_hui = Livraison.objects.filter(
        date_livraison_effective__date=aujourd_hui,
        statut='livree',
        montant_collecte__isnull=False
    ).aggregate(total=Sum('montant_collecte'))['total'] or 0
    
    # Historique des rapports (simul√© pour l'instant)
    rapports_historique = []
    
    context = {
        'stats_jour': {
            'lots_recus': lots_recus_aujourd_hui,
            'colis_livres': colis_livres_aujourd_hui,
            'depenses_total': float(depenses_total_aujourd_hui),
            'clients_notifies': clients_notifies_aujourd_hui,
            'revenus_livraison': float(revenus_livraison_aujourd_hui),
        },
        'rapports_historique': rapports_historique,
        'today': aujourd_hui,
        'title': 'Rapports et Analyses',
    }
    return render(request, 'agent_mali_app/rapports.html', context)

@agent_mali_required
@require_http_methods(["POST"])
def send_report_whatsapp_api(request):
    """
    API pour envoyer un rapport via WhatsApp ET par email avec PDF
    """
    try:
        data = json.loads(request.body)
        report_type = data.get('type')
        period = data.get('period')
        
        # G√©n√©rer le rapport PDF
        pdf_content = generate_daily_report_pdf(period)
        
        # Message de base pour WhatsApp
        whatsapp_message = f"""
üìà Rapport Journalier TS Air Cargo Mali

üìÖ Date: {datetime.strptime(period, '%Y-%m-%d').strftime('%d/%m/%Y')}
üë• Agent: {request.user.get_full_name()}
üè¢ Agence: Mali

üìä Rapport automatique quotidien g√©n√©r√©.

üìß Le rapport d√©taill√© en PDF a √©t√© envoy√© par email.

√âquipe TS Air Cargo Mali üöÄ
        """.strip()
        
        # Utiliser le service de notification existant pour simplifier
        from notifications_app.services import NotificationService
        
        # Cr√©er un message d√©taill√© pour les admins WhatsApp
        admin_whatsapp_message = f"""
üìà RAPPORT JOURNALIER AUTOMATIQUE

üìÖ Date: {datetime.strptime(period, '%Y-%m-%d').strftime('%d/%m/%Y')}
üë• G√©n√©r√© par: {request.user.get_full_name()}
üè¢ Agence: Mali - Bamako

üìÜ Type: Rapport {report_type}
üóìÔ∏è P√©riode: {period}

üìß Le rapport d√©taill√© en PDF a √©t√© envoy√© par email.

√âquipe TS Air Cargo Mali üöÄ
        """.strip()
        
        # 1. Envoyer la notification WhatsApp
        admins_contacted_whatsapp = NotificationService.send_admin_notification(
            message=admin_whatsapp_message,
            title=f"Rapport {report_type} - {datetime.strptime(period, '%Y-%m-%d').strftime('%d/%m/%Y')}"
        )
        
        # 2. Envoyer le PDF par email
        from django.core.mail import EmailMessage
        from django.conf import settings
        
        # Sujet de l'email
        email_subject = f"üìä Rapport Quotidien TS Air Cargo Mali - {datetime.strptime(period, '%Y-%m-%d').strftime('%d/%m/%Y')}"
        
        # Corps de l'email
        email_body = f"""
Bonjour,

Veuillez trouver ci-joint le rapport quotidien d'activit√© TS Air Cargo Mali.

üìä INFORMATIONS DU RAPPORT:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ Date du rapport: {datetime.strptime(period, '%Y-%m-%d').strftime('%d/%m/%Y')}
üë§ G√©n√©r√© par: {request.user.get_full_name()}
üè¢ Agence: Mali - Bamako
üïê Date de g√©n√©ration: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

üìã CONTENU DU RAPPORT:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ üì¶ Lots re√ßus de Chine
‚Ä¢ üöö Colis livr√©s aux clients
‚Ä¢ üí∏ D√©penses enregistr√©es
‚Ä¢ üí∞ Revenus de livraison collect√©s
‚Ä¢ üìä Analyses de performance journali√®re
‚Ä¢ üìà Indicateurs cl√©s de performance (KPI)

üìé Le rapport d√©taill√© est disponible en pi√®ce jointe au format PDF.

üì± NOTIFICATION WHATSAPP:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Une notification WhatsApp a √©galement √©t√© envoy√©e √† {admins_contacted_whatsapp} administrateur(s).

Pour toute question concernant ce rapport, n'h√©sitez pas √† nous contacter.

Cordialement,
√âquipe TS Air Cargo Mali

üìß contact@ts-aircargo.com | üìû +223 XX XX XX XX
üåê www.ts-aircargo.com
        """.strip()
        
        # D√©terminer les destinataires de l'email
        email_recipients = getattr(settings, 'EMAIL_REPORT_RECIPIENTS', ['admin@ts-aircargo.com'])
        
        # En mode d√©veloppement, v√©rifier si l'utilisateur a un email
        if settings.DEBUG and request.user.email:
            # Ajouter l'email de l'utilisateur connect√© pour les tests
            if request.user.email not in email_recipients:
                email_recipients = [request.user.email] + email_recipients
        
        # Cr√©er et envoyer l'email
        email_sent_count = 0
        try:
            email = EmailMessage(
                subject=email_subject,
                body=email_body,
                from_email=getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@ts-aircargo.com'),
                to=email_recipients,
            )
            
            # Attacher le PDF
            email.attach(
                f"rapport_quotidien_{period}.pdf",
                pdf_content,
                'application/pdf'
            )
            
            # Envoyer l'email
            email.send()
            email_sent_count = len(email_recipients)
            
        except Exception as email_error:
            print(f"Erreur envoi email: {email_error}")
            # Continuer m√™me si l'email √©choue
        
        # Construire le message de retour
        success_parts = []
        if admins_contacted_whatsapp > 0:
            success_parts.append(f"{admins_contacted_whatsapp} notification(s) WhatsApp")
        if email_sent_count > 0:
            success_parts.append(f"{email_sent_count} email(s) avec PDF")
        
        if success_parts:
            return JsonResponse({
                'success': True,
                'message': f'Rapport {report_type} envoy√© avec succ√®s : ' + ' et '.join(success_parts)
            })
        else:
            return JsonResponse({
                'success': False,
                'error': 'Aucune notification n\'a pu √™tre envoy√©e. V√©rifiez la configuration WhatsApp et Email.'
            })
            
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@agent_mali_required
@require_http_methods(["POST"])
def generate_daily_report_api(request):
    """
    API pour g√©n√©rer un rapport quotidien en PDF et le renvoyer comme un fichier
    """
    try:
        data = json.loads(request.body)
        date = data.get('date')

        # V√©rifier la date
        if not date:
            return JsonResponse({'success': False, 'error': 'Date non fournie'}, status=400)

        # G√©n√©rer le PDF
        pdf_content = generate_daily_report_pdf(date)

        # Retourner le fichier PDF
        response = HttpResponse(pdf_content, content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="rapport_quotidien_{date}.pdf"'
        return response

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@agent_mali_required
@require_http_methods(["POST"])
def generate_monthly_report_api(request):
    """
    API pour g√©n√©rer un rapport mensuel en PDF et le renvoyer comme un fichier
    """
    try:
        data = json.loads(request.body)
        month = data.get('month')  # Format: 'YYYY-MM'

        # V√©rifier le mois
        if not month:
            return JsonResponse({'success': False, 'error': 'Mois non fourni'}, status=400)

        # G√©n√©rer le PDF
        pdf_content = generate_monthly_report_pdf(month)

        # Retourner le fichier PDF
        response = HttpResponse(pdf_content, content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="rapport_mensuel_{month}.pdf"'
        return response

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@agent_mali_required
@require_http_methods(["POST"])
def generate_yearly_report_api(request):
    """
    API pour g√©n√©rer un rapport annuel en PDF et le renvoyer comme un fichier
    """
    try:
        data = json.loads(request.body)
        year = data.get('year')  # Format: 'YYYY'

        # V√©rifier l'ann√©e
        if not year:
            return JsonResponse({'success': False, 'error': 'Ann√©e non fournie'}, status=400)

        # G√©n√©rer le PDF
        pdf_content = generate_yearly_report_pdf(year)

        # Retourner le fichier PDF
        response = HttpResponse(pdf_content, content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="rapport_annuel_{year}.pdf"'
        return response

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@agent_mali_required
@require_http_methods(["POST"])
def send_report_email_api(request):
    """
    API pour envoyer un rapport par email
    """
    try:
        data = json.loads(request.body)
        report_type = data.get('type', 'daily')
        period = data.get('period')
        
        if not period:
            return JsonResponse({
                'success': False,
                'error': 'P√©riode non fournie'
            })
        
        # G√©n√©rer le PDF selon le type de rapport
        if report_type == 'daily':
            pdf_content = generate_daily_report_pdf(period)
            subject = f"Rapport Quotidien TS Air Cargo Mali - {datetime.strptime(period, '%Y-%m-%d').strftime('%d/%m/%Y')}"
            filename = f"rapport_quotidien_{period}.pdf"
        elif report_type == 'monthly':
            pdf_content = generate_monthly_report_pdf(period)
            year, month = period.split('-')
            month_name = datetime(int(year), int(month), 1).strftime('%B %Y')
            subject = f"Rapport Mensuel TS Air Cargo Mali - {month_name}"
            filename = f"rapport_mensuel_{period}.pdf"
        elif report_type == 'yearly':
            pdf_content = generate_yearly_report_pdf(period)
            subject = f"Rapport Annuel TS Air Cargo Mali - {period}"
            filename = f"rapport_annuel_{period}.pdf"
        else:
            return JsonResponse({
                'success': False,
                'error': 'Type de rapport non support√©'
            })
        
        # Contenu de l'email
        email_body = f"""
Bonjour,

Veuillez trouver ci-joint le rapport d'activit√© TS Air Cargo Mali.

üìä Type de rapport: {report_type.title()}
üìÖ P√©riode: {period}
üë§ G√©n√©r√© par: {request.user.get_full_name()}
üè¢ Agence: Mali - Bamako
üïê Date de g√©n√©ration: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

Ce rapport contient les informations d√©taill√©es sur:
‚Ä¢ Les lots re√ßus
‚Ä¢ Les colis livr√©s
‚Ä¢ Les d√©penses enregistr√©es
‚Ä¢ Les revenus g√©n√©r√©s
‚Ä¢ Les analyses de performance

Cordialement,
√âquipe TS Air Cargo Mali
        """.strip()
        
        # Envoyer l'email
        from django.core.mail import EmailMessage
        from django.conf import settings
        
        # Configuration email destinataire
        # En mode d√©veloppement, envoyer √† l'utilisateur connect√© ou un email de test
        if hasattr(settings, 'EMAIL_TEST_RECIPIENTS') and settings.EMAIL_TEST_RECIPIENTS:
            recipients = settings.EMAIL_TEST_RECIPIENTS
        else:
            # Fallback: utiliser l'email de l'utilisateur connect√© si disponible
            recipients = [request.user.email] if request.user.email else ['admin@ts-aircargo.com']
        
        email = EmailMessage(
            subject=subject,
            body=email_body,
            from_email=getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@ts-aircargo.com'),
            to=recipients,
        )
        
        # Attacher le PDF
        email.attach(filename, pdf_content, 'application/pdf')
        
        # Envoyer l'email
        email.send()
        
        return JsonResponse({
            'success': True,
            'message': f'Rapport {report_type} envoy√© par email avec succ√®s √† {len(recipients)} destinataire(s)'
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'Erreur lors de l\'envoi email: {str(e)}'
        })

@agent_mali_required
@require_http_methods(["POST"])
def schedule_auto_report_api(request):
    """
    API pour programmer l'envoi automatique des rapports
    """
    try:
        data = json.loads(request.body)
        enabled = data.get('enabled', False)
        time = data.get('time', '23:59')
        
        if enabled:
            # Programmer la t√¢che automatique
            # Note: Ceci n√©cessite une impl√©mentation avec Celery ou Django-cron
            # Pour le moment, on simule la programmation
            
            # Sauvegarder la configuration dans la session ou la base de donn√©es
            request.session['auto_report_enabled'] = True
            request.session['auto_report_time'] = time
            
            return JsonResponse({
                'success': True,
                'message': f'Envoi automatique programm√© pour {time} chaque jour'
            })
        else:
            # D√©sactiver la t√¢che automatique
            request.session['auto_report_enabled'] = False
            
            return JsonResponse({
                'success': True,
                'message': 'Envoi automatique d√©sactiv√©'
            })
            
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

def generate_daily_report_pdf(date_str):
    """
    G√©n√©rer un rapport journalier en PDF avec design professionnel
    """
    from io import BytesIO
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    from datetime import datetime, timedelta
    import os
    
    # Cr√©er un buffer en m√©moire
    buffer = BytesIO()
    
    # Cr√©er le document PDF avec marges optimis√©es
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        rightMargin=50,
        leftMargin=50,
        topMargin=50,
        bottomMargin=50
    )
    story = []
    styles = getSampleStyleSheet()
    
    # Styles personnalis√©s
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=15,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=10,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2c5282'),
        fontName='Helvetica-Bold'
    )
    
    section_style = ParagraphStyle(
        'SectionTitle',
        parent=styles['Heading3'],
        fontSize=12,
        spaceAfter=8,
        spaceBefore=12,
        textColor=colors.HexColor('#2d3748'),
        fontName='Helvetica-Bold',
        borderWidth=1,
        borderColor=colors.HexColor('#e2e8f0'),
        borderPadding=5,
        backColor=colors.HexColor('#f7fafc')
    )
    
    # En-t√™te avec logo et titre
    title = Paragraph("üìä RAPPORT JOURNALIER", title_style)
    story.append(title)
    
    subtitle = Paragraph("TS AIR CARGO - AGENCE MALI", subtitle_style)
    story.append(subtitle)
    
    # Ligne de s√©paration
    story.append(Spacer(1, 10))
    
    # Informations de base
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    date_filter = date_obj.date()
    
    info_data = [
        ['üìÖ Date du rapport:', date_obj.strftime('%d/%m/%Y')],
        ['üïê G√©n√©r√© le:', datetime.now().strftime('%d/%m/%Y √† %H:%M')],
        ['üè¢ Agence:', 'Mali - Bamako']
    ]
    
    info_table = Table(info_data, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#edf2f7')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#2d3748')),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (0, 0), (-1, -1), 8),
        ('RIGHTPADDING', (0, 0), (-1, -1), 8),
        ('TOPPADDING', (0, 0), (-1, -1), 5),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
    ]))
    
    story.append(info_table)
    story.append(Spacer(1, 12))
    
    # Statistiques du jour
    # Lots re√ßus
    lots_recus = ReceptionLot.objects.filter(date_reception__date=date_filter).count()
    
    # Colis livr√©s
    colis_livres = Livraison.objects.filter(
        date_livraison_effective__date=date_filter,
        statut='livree'
    ).count()
    
    # D√©penses
    depenses_total = Depense.objects.filter(
        date_depense=date_filter
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    # Revenus
    revenus_total = Livraison.objects.filter(
        date_livraison_effective__date=date_filter,
        statut='livree',
        montant_collecte__isnull=False
    ).aggregate(total=Sum('montant_collecte'))['total'] or 0
    
    # B√©n√©fice
    benefice_net = revenus_total - depenses_total
    
    # V√©rifier s'il y a des donn√©es
    has_data = lots_recus > 0 or colis_livres > 0 or depenses_total > 0 or revenus_total > 0
    
    if has_data:
        # Section des indicateurs cl√©s
        section_title = Paragraph("üìà INDICATEURS CL√âS DE PERFORMANCE", section_style)
        story.append(section_title)
        
        # Tableau des KPIs avec couleurs
        kpi_data = [
            ['üìä INDICATEUR', 'üìã VALEUR', 'üìà STATUT'],
            ['üì¶ Lots re√ßus', str(lots_recus), '‚úÖ Trait√©' if lots_recus > 0 else '‚ö™ Aucun'],
            ['üöö Colis livr√©s', str(colis_livres), '‚úÖ Livr√©' if colis_livres > 0 else '‚ö™ Aucun'],
            ['üí∏ D√©penses totales', f"{depenses_total:,.0f} CFA", 'üî¥ Sortie' if depenses_total > 0 else '‚ö™ Aucune'],
            ['üí∞ Revenus de livraison', f"{revenus_total:,.0f} CFA", 'üü¢ Entr√©e' if revenus_total > 0 else '‚ö™ Aucun'],
            ['üìä B√©n√©fice net', f"{benefice_net:,.0f} CFA", 
             'üü¢ Positif' if benefice_net > 0 else 'üî¥ N√©gatif' if benefice_net < 0 else '‚ö™ √âquilibr√©']
        ]
        
        kpi_table = Table(kpi_data, colWidths=[2.5*inch, 1.5*inch, 1.5*inch])
        kpi_table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2b6cb0')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # Corps du tableau
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2d3748')),
            ('FONTNAME', (0, 1), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('ALIGN', (0, 1), (0, -1), 'LEFT'),
            ('ALIGN', (1, 1), (1, -1), 'CENTER'),
            ('ALIGN', (2, 1), (2, -1), 'CENTER'),
            
            # Alternance de couleurs
            ('BACKGROUND', (0, 2), (-1, 2), colors.HexColor('#f7fafc')),
            ('BACKGROUND', (0, 4), (-1, 4), colors.HexColor('#f7fafc')),
            ('BACKGROUND', (0, 6), (-1, 6), colors.HexColor('#f7fafc')),
            
            # Mise en forme sp√©ciale pour le b√©n√©fice
            ('BACKGROUND', (0, 5), (-1, 5), 
             colors.HexColor('#c6f6d5') if benefice_net > 0 else 
             colors.HexColor('#fed7d7') if benefice_net < 0 else colors.HexColor('#e2e8f0')),
            
            # Bordures et espacement
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(kpi_table)
        story.append(Spacer(1, 10))
        
        # Section d√©tails des d√©penses si il y en a
        if depenses_total > 0:
            section_depenses = Paragraph("üí∏ D√âTAIL DES D√âPENSES", section_style)
            story.append(section_depenses)
            
            depenses_detail = Depense.objects.filter(
                date_depense=date_filter
            ).values('type_depense', 'libelle', 'montant')[:10]  # Limiter √† 10 entr√©es
            
            if depenses_detail:
                depenses_data = [['üè∑Ô∏è TYPE', 'üìù LIBELL√â', 'üí∞ MONTANT']]
                for dep in depenses_detail:
                    depenses_data.append([
                        dep['type_depense'].replace('_', ' ').title(),
                        dep['libelle'][:30] + '...' if len(dep['libelle']) > 30 else dep['libelle'],
                        f"{dep['montant']:,.0f} CFA"
                    ])
                
                depenses_table = Table(depenses_data, colWidths=[1.5*inch, 2.5*inch, 1.5*inch])
                depenses_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#e53e3e')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 11),
                    ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                    
                    ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                    ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2d3748')),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 1), (-1, -1), 9),
                    ('ALIGN', (0, 1), (1, -1), 'LEFT'),
                    ('ALIGN', (2, 1), (2, -1), 'RIGHT'),
                    
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('LEFTPADDING', (0, 0), (-1, -1), 6),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 6),
                    ('TOPPADDING', (0, 0), (-1, -1), 4),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
                ]))
                
                story.append(depenses_table)
                story.append(Spacer(1, 8))
        
    else:
        # Aucune donn√©e disponible
        no_data_style = ParagraphStyle(
            'NoData',
            parent=styles['Normal'],
            fontSize=14,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#718096'),
            fontName='Helvetica'
        )
        
        no_data_msg = Paragraph(
            "üì≠ AUCUNE ACTIVIT√â ENREGISTR√âE<br/><br/>" + 
            "Aucune donn√©e n'a √©t√© trouv√©e pour cette date.<br/>" +
            "‚Ä¢ Aucun lot re√ßu<br/>" +
            "‚Ä¢ Aucun colis livr√©<br/>" +
            "‚Ä¢ Aucune d√©pense enregistr√©e<br/>" +
            "‚Ä¢ Aucun revenu g√©n√©r√©<br/><br/>" +
            "V√©rifiez que les donn√©es ont √©t√© correctement saisies.",
            no_data_style
        )
        story.append(no_data_msg)
        story.append(Spacer(1, 10))
    
    # Pied de page
    story.append(Spacer(1, 15))
    
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=9,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#718096'),
        fontName='Helvetica-Oblique'
    )
    
    footer = Paragraph(
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br/>" +
        f"üìß contact@ts-aircargo.com | üìû +223 XX XX XX XX | üåê www.ts-aircargo.com<br/>" +
        f"¬© {datetime.now().year} TS Air Cargo Mali - Tous droits r√©serv√©s",
        footer_style
    )
    story.append(footer)
    
    # Construire le PDF
    doc.build(story)
    
    # R√©cup√©rer le contenu
    pdf_content = buffer.getvalue()
    buffer.close()
    
    return pdf_content

def generate_monthly_report_pdf(month_str):
    """
    G√©n√©rer un rapport mensuel en PDF avec design professionnel
    Format month_str: 'YYYY-MM'
    """
    from io import BytesIO
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    from datetime import datetime, timedelta
    from calendar import monthrange
    import locale
    
    # D√©finir la locale en fran√ßais si possible
    try:
        locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
    except:
        pass
    
    # Cr√©er un buffer en m√©moire
    buffer = BytesIO()
    
    # Cr√©er le document PDF avec marges
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )
    story = []
    styles = getSampleStyleSheet()
    
    # Styles personnalis√©s
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2c5282'),
        fontName='Helvetica-Bold'
    )
    
    section_style = ParagraphStyle(
        'SectionTitle',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=15,
        spaceBefore=25,
        textColor=colors.HexColor('#2d3748'),
        fontName='Helvetica-Bold',
        borderWidth=1,
        borderColor=colors.HexColor('#e2e8f0'),
        borderPadding=8,
        backColor=colors.HexColor('#f7fafc')
    )
    
    # Traitement de la p√©riode
    year, month = map(int, month_str.split('-'))
    month_obj = datetime(year, month, 1)
    
    # Calculer les dates de d√©but et fin du mois
    start_date = datetime(year, month, 1).date()
    _, last_day = monthrange(year, month)
    end_date = datetime(year, month, last_day).date()
    
    # En-t√™te avec logo et titre
    title = Paragraph("üìä RAPPORT MENSUEL", title_style)
    story.append(title)
    
    subtitle = Paragraph("TS AIR CARGO - AGENCE MALI", subtitle_style)
    story.append(subtitle)
    
    # Ligne de s√©paration
    story.append(Spacer(1, 20))
    
    # Informations de base
    month_name = month_obj.strftime('%B %Y').title()
    info_data = [
        ['üìÖ P√©riode du rapport:', month_name],
        ['üïê G√©n√©r√© le:', datetime.now().strftime('%d/%m/%Y √† %H:%M')],
        ['üè¢ Agence:', 'Mali - Bamako'],
        ['üìà Du:', start_date.strftime('%d/%m/%Y')],
        ['üìà Au:', end_date.strftime('%d/%m/%Y')]
    ]
    
    info_table = Table(info_data, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#edf2f7')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#2d3748')),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (0, 0), (-1, -1), 12),
        ('RIGHTPADDING', (0, 0), (-1, -1), 12),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    story.append(info_table)
    story.append(Spacer(1, 30))
    
    # Statistiques du mois
    # Lots re√ßus
    lots_recus = ReceptionLot.objects.filter(
        date_reception__date__gte=start_date,
        date_reception__date__lte=end_date
    ).count()
    
    # Colis livr√©s
    colis_livres = Livraison.objects.filter(
        date_livraison_effective__date__gte=start_date,
        date_livraison_effective__date__lte=end_date,
        statut='livree'
    ).count()
    
    # D√©penses
    depenses_total = Depense.objects.filter(
        date_depense__gte=start_date,
        date_depense__lte=end_date
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    # Revenus
    revenus_total = Livraison.objects.filter(
        date_livraison_effective__date__gte=start_date,
        date_livraison_effective__date__lte=end_date,
        statut='livree',
        montant_collecte__isnull=False
    ).aggregate(total=Sum('montant_collecte'))['total'] or 0
    
    # B√©n√©fice
    benefice_net = revenus_total - depenses_total
    
    # Moyennes journali√®res
    nombre_jours = (end_date - start_date).days + 1
    moy_lots_jour = lots_recus / nombre_jours if nombre_jours > 0 else 0
    moy_colis_jour = colis_livres / nombre_jours if nombre_jours > 0 else 0
    moy_revenus_jour = revenus_total / nombre_jours if nombre_jours > 0 else 0
    
    # V√©rifier s'il y a des donn√©es
    has_data = lots_recus > 0 or colis_livres > 0 or depenses_total > 0 or revenus_total > 0
    
    if has_data:
        # Section des indicateurs cl√©s
        section_title = Paragraph("üìà INDICATEURS CL√âS MENSUELS", section_style)
        story.append(section_title)
        
        # Tableau des KPIs avec couleurs
        kpi_data = [
            ['üìä INDICATEUR', 'üìã VALEUR', 'üìä MOYENNE/JOUR', 'üìà STATUT'],
            ['üì¶ Lots re√ßus', str(lots_recus), f"{moy_lots_jour:.1f}", '‚úÖ Actif' if lots_recus > 0 else '‚ö™ Inactif'],
            ['üöö Colis livr√©s', str(colis_livres), f"{moy_colis_jour:.1f}", '‚úÖ Performant' if colis_livres > 0 else '‚ö™ Aucun'],
            ['üí∏ D√©penses totales', f"{depenses_total:,.0f} CFA", f"{depenses_total/nombre_jours:,.0f} CFA", 'üî¥ Sortie' if depenses_total > 0 else '‚ö™ Aucune'],
            ['üí∞ Revenus totaux', f"{revenus_total:,.0f} CFA", f"{moy_revenus_jour:,.0f} CFA", 'üü¢ Entr√©e' if revenus_total > 0 else '‚ö™ Aucun'],
            ['üìä B√©n√©fice net', f"{benefice_net:,.0f} CFA", f"{benefice_net/nombre_jours:,.0f} CFA", 
             'üü¢ Positif' if benefice_net > 0 else 'üî¥ N√©gatif' if benefice_net < 0 else '‚ö™ √âquilibr√©']
        ]
        
        kpi_table = Table(kpi_data, colWidths=[2*inch, 1.3*inch, 1.3*inch, 1.4*inch])
        kpi_table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2b6cb0')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # Corps du tableau
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2d3748')),
            ('FONTNAME', (0, 1), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('ALIGN', (0, 1), (0, -1), 'LEFT'),
            ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
            
            # Alternance de couleurs
            ('BACKGROUND', (0, 2), (-1, 2), colors.HexColor('#f7fafc')),
            ('BACKGROUND', (0, 4), (-1, 4), colors.HexColor('#f7fafc')),
            ('BACKGROUND', (0, 6), (-1, 6), colors.HexColor('#f7fafc')),
            
            # Mise en forme sp√©ciale pour le b√©n√©fice
            ('BACKGROUND', (0, 5), (-1, 5), 
             colors.HexColor('#c6f6d5') if benefice_net > 0 else 
             colors.HexColor('#fed7d7') if benefice_net < 0 else colors.HexColor('#e2e8f0')),
            
            # Bordures et espacement
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        story.append(kpi_table)
        story.append(Spacer(1, 30))
        
        # Analyse des d√©penses par type
        if depenses_total > 0:
            section_depenses = Paragraph("üí∏ ANALYSE DES D√âPENSES PAR CAT√âGORIE", section_style)
            story.append(section_depenses)
            
            depenses_par_type = Depense.objects.filter(
                date_depense__gte=start_date,
                date_depense__lte=end_date
            ).values('type_depense').annotate(
                total=Sum('montant'),
                count=Count('id')
            ).order_by('-total')
            
            if depenses_par_type:
                depenses_data = [['üè∑Ô∏è CAT√âGORIE', 'üí∞ MONTANT TOTAL', 'üìä NOMBRE', 'üìà % DU TOTAL']]
                for dep in depenses_par_type:
                    pourcentage = (dep['total'] / depenses_total * 100) if depenses_total > 0 else 0
                    depenses_data.append([
                        dep['type_depense'].replace('_', ' ').title(),
                        f"{dep['total']:,.0f} CFA",
                        str(dep['count']),
                        f"{pourcentage:.1f}%"
                    ])
                
                depenses_table = Table(depenses_data, colWidths=[2*inch, 1.5*inch, 1*inch, 1*inch])
                depenses_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#e53e3e')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 10),
                    ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                    
                    ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                    ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2d3748')),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 1), (-1, -1), 9),
                    ('ALIGN', (0, 1), (0, -1), 'LEFT'),
                    ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
                    
                    ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                    ('LEFTPADDING', (0, 0), (-1, -1), 8),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 8),
                    ('TOPPADDING', (0, 0), (-1, -1), 6),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ]))
                
                story.append(depenses_table)
                story.append(Spacer(1, 20))
    
    else:
        # Aucune donn√©e disponible
        no_data_style = ParagraphStyle(
            'NoData',
            parent=styles['Normal'],
            fontSize=14,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#718096'),
            fontName='Helvetica'
        )
        
        no_data_msg = Paragraph(
            f"üì≠ AUCUNE ACTIVIT√â ENREGISTR√âE POUR {month_name.upper()}<br/><br/>" + 
            "Aucune donn√©e n'a √©t√© trouv√©e pour cette p√©riode.<br/>" +
            "‚Ä¢ Aucun lot re√ßu<br/>" +
            "‚Ä¢ Aucun colis livr√©<br/>" +
            "‚Ä¢ Aucune d√©pense enregistr√©e<br/>" +
            "‚Ä¢ Aucun revenu g√©n√©r√©<br/><br/>" +
            "V√©rifiez que les donn√©es ont √©t√© correctement saisies.",
            no_data_style
        )
        story.append(no_data_msg)
        story.append(Spacer(1, 30))
    
    # Pied de page
    story.append(Spacer(1, 50))
    
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=10,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#718096'),
        fontName='Helvetica-Oblique'
    )
    
    footer = Paragraph(
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br/>" +
        f"üìß contact@ts-aircargo.com | üìû +223 XX XX XX XX | üåê www.ts-aircargo.com<br/>" +
        f"¬© {datetime.now().year} TS Air Cargo Mali - Tous droits r√©serv√©s",
        footer_style
    )
    story.append(footer)
    
    # Construire le PDF
    doc.build(story)
    
    # R√©cup√©rer le contenu
    pdf_content = buffer.getvalue()
    buffer.close()
    
    return pdf_content

def generate_yearly_report_pdf(year_str):
    """
    G√©n√©rer un rapport annuel en PDF avec design professionnel
    Format year_str: 'YYYY'
    """
    from io import BytesIO
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
    from datetime import datetime, timedelta
    
    # Cr√©er un buffer en m√©moire
    buffer = BytesIO()
    
    # Cr√©er le document PDF avec marges
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )
    story = []
    styles = getSampleStyleSheet()
    
    # Styles personnalis√©s
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#1f4e79'),
        fontName='Helvetica-Bold'
    )
    
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2c5282'),
        fontName='Helvetica-Bold'
    )
    
    section_style = ParagraphStyle(
        'SectionTitle',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=15,
        spaceBefore=25,
        textColor=colors.HexColor('#2d3748'),
        fontName='Helvetica-Bold',
        borderWidth=1,
        borderColor=colors.HexColor('#e2e8f0'),
        borderPadding=8,
        backColor=colors.HexColor('#f7fafc')
    )
    
    # Traitement de l'ann√©e
    year = int(year_str)
    start_date = datetime(year, 1, 1).date()
    end_date = datetime(year, 12, 31).date()
    
    # En-t√™te avec logo et titre
    title = Paragraph("üìä RAPPORT ANNUEL", title_style)
    story.append(title)
    
    subtitle = Paragraph("TS AIR CARGO - AGENCE MALI", subtitle_style)
    story.append(subtitle)
    
    # Ligne de s√©paration
    story.append(Spacer(1, 20))
    
    # Informations de base
    info_data = [
        ['üìÖ Ann√©e du rapport:', str(year)],
        ['üïê G√©n√©r√© le:', datetime.now().strftime('%d/%m/%Y √† %H:%M')],
        ['üè¢ Agence:', 'Mali - Bamako'],
        ['üìà P√©riode:', f"Du 01/01/{year} au 31/12/{year}"]
    ]
    
    info_table = Table(info_data, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#edf2f7')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#2d3748')),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (0, 0), (-1, -1), 12),
        ('RIGHTPADDING', (0, 0), (-1, -1), 12),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    story.append(info_table)
    story.append(Spacer(1, 30))
    
    # Statistiques de l'ann√©e
    # Lots re√ßus
    lots_recus = ReceptionLot.objects.filter(
        date_reception__date__gte=start_date,
        date_reception__date__lte=end_date
    ).count()
    
    # Colis livr√©s
    colis_livres = Livraison.objects.filter(
        date_livraison_effective__date__gte=start_date,
        date_livraison_effective__date__lte=end_date,
        statut='livree'
    ).count()
    
    # D√©penses
    depenses_total = Depense.objects.filter(
        date_depense__gte=start_date,
        date_depense__lte=end_date
    ).aggregate(total=Sum('montant'))['total'] or 0
    
    # Revenus
    revenus_total = Livraison.objects.filter(
        date_livraison_effective__date__gte=start_date,
        date_livraison_effective__date__lte=end_date,
        statut='livree',
        montant_collecte__isnull=False
    ).aggregate(total=Sum('montant_collecte'))['total'] or 0
    
    # B√©n√©fice
    benefice_net = revenus_total - depenses_total
    
    # Moyennes mensuelles
    moy_lots_mois = lots_recus / 12
    moy_colis_mois = colis_livres / 12
    moy_revenus_mois = revenus_total / 12
    moy_depenses_mois = depenses_total / 12
    
    # V√©rifier s'il y a des donn√©es
    has_data = lots_recus > 0 or colis_livres > 0 or depenses_total > 0 or revenus_total > 0
    
    if has_data:
        # Section des indicateurs cl√©s
        section_title = Paragraph("üìà BILAN ANNUEL - INDICATEURS CL√âS", section_style)
        story.append(section_title)
        
        # Tableau des KPIs avec couleurs
        kpi_data = [
            ['üìä INDICATEUR', 'üìã TOTAL ANNUEL', 'üìä MOYENNE/MOIS', 'üìà PERFORMANCE'],
            ['üì¶ Lots re√ßus', str(lots_recus), f"{moy_lots_mois:.1f}", '‚úÖ Excellent' if lots_recus > 100 else 'üü° Moyen' if lots_recus > 50 else 'üî¥ Faible'],
            ['üöö Colis livr√©s', str(colis_livres), f"{moy_colis_mois:.1f}", '‚úÖ Excellent' if colis_livres > 500 else 'üü° Moyen' if colis_livres > 200 else 'üî¥ Faible'],
            ['üí∏ D√©penses totales', f"{depenses_total:,.0f} CFA", f"{moy_depenses_mois:,.0f} CFA", 'üî¥ √âlev√©' if depenses_total > 1000000 else 'üü° Mod√©r√©'],
            ['üí∞ Revenus totaux', f"{revenus_total:,.0f} CFA", f"{moy_revenus_mois:,.0f} CFA", '‚úÖ Excellent' if revenus_total > 2000000 else 'üü° Moyen'],
            ['üìä B√©n√©fice net', f"{benefice_net:,.0f} CFA", f"{benefice_net/12:,.0f} CFA", 
             'üü¢ Tr√®s Positif' if benefice_net > 1000000 else '‚úÖ Positif' if benefice_net > 0 else 'üî¥ N√©gatif']
        ]
        
        kpi_table = Table(kpi_data, colWidths=[2*inch, 1.5*inch, 1.5*inch, 1.5*inch])
        kpi_table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2b6cb0')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # Corps du tableau
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2d3748')),
            ('FONTNAME', (0, 1), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('ALIGN', (0, 1), (0, -1), 'LEFT'),
            ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
            
            # Alternance de couleurs
            ('BACKGROUND', (0, 2), (-1, 2), colors.HexColor('#f7fafc')),
            ('BACKGROUND', (0, 4), (-1, 4), colors.HexColor('#f7fafc')),
            ('BACKGROUND', (0, 6), (-1, 6), colors.HexColor('#f7fafc')),
            
            # Mise en forme sp√©ciale pour le b√©n√©fice
            ('BACKGROUND', (0, 5), (-1, 5), 
             colors.HexColor('#c6f6d5') if benefice_net > 0 else 
             colors.HexColor('#fed7d7') if benefice_net < 0 else colors.HexColor('#e2e8f0')),
            
            # Bordures et espacement
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        story.append(kpi_table)
        story.append(Spacer(1, 30))
        
        # √âvolution mensuelle (tableau r√©capitulatif)
        section_evolution = Paragraph("üìà √âVOLUTION MENSUELLE", section_style)
        story.append(section_evolution)
        
        # Cr√©er un tableau avec l'√©volution mois par mois
        evolution_data = [['MOIS', 'LOTS RE√áUS', 'COLIS LIVR√âS', 'REVENUS (CFA)', 'D√âPENSES (CFA)']]
        
        for month in range(1, 13):
            month_start = datetime(year, month, 1).date()
            if month == 12:
                month_end = datetime(year, 12, 31).date()
            else:
                month_end = datetime(year, month + 1, 1).date() - timedelta(days=1)
            
            # Statistiques du mois
            lots_mois = ReceptionLot.objects.filter(
                date_reception__date__gte=month_start,
                date_reception__date__lte=month_end
            ).count()
            
            colis_mois = Livraison.objects.filter(
                date_livraison_effective__date__gte=month_start,
                date_livraison_effective__date__lte=month_end,
                statut='livree'
            ).count()
            
            revenus_mois = Livraison.objects.filter(
                date_livraison_effective__date__gte=month_start,
                date_livraison_effective__date__lte=month_end,
                statut='livree',
                montant_collecte__isnull=False
            ).aggregate(total=Sum('montant_collecte'))['total'] or 0
            
            depenses_mois = Depense.objects.filter(
                date_depense__gte=month_start,
                date_depense__lte=month_end
            ).aggregate(total=Sum('montant'))['total'] or 0
            
            month_name = datetime(year, month, 1).strftime('%B')[:3].title()
            evolution_data.append([
                month_name,
                str(lots_mois),
                str(colis_mois),
                f"{revenus_mois:,.0f}" if revenus_mois > 0 else "-",
                f"{depenses_mois:,.0f}" if depenses_mois > 0 else "-"
            ])
        
        evolution_table = Table(evolution_data, colWidths=[1*inch, 1*inch, 1*inch, 1.5*inch, 1.5*inch])
        evolution_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#38a169')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2d3748')),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#cbd5e0')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 4),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        
        story.append(evolution_table)
        story.append(Spacer(1, 20))
    
    else:
        # Aucune donn√©e disponible
        no_data_style = ParagraphStyle(
            'NoData',
            parent=styles['Normal'],
            fontSize=14,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#718096'),
            fontName='Helvetica'
        )
        
        no_data_msg = Paragraph(
            f"üì≠ AUCUNE ACTIVIT√â ENREGISTR√âE POUR L'ANN√âE {year}<br/><br/>" + 
            "Aucune donn√©e n'a √©t√© trouv√©e pour cette ann√©e.<br/>" +
            "‚Ä¢ Aucun lot re√ßu<br/>" +
            "‚Ä¢ Aucun colis livr√©<br/>" +
            "‚Ä¢ Aucune d√©pense enregistr√©e<br/>" +
            "‚Ä¢ Aucun revenu g√©n√©r√©<br/><br/>" +
            "V√©rifiez que les donn√©es ont √©t√© correctement saisies.",
            no_data_style
        )
        story.append(no_data_msg)
        story.append(Spacer(1, 30))
    
    # Pied de page
    story.append(Spacer(1, 50))
    
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=10,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#718096'),
        fontName='Helvetica-Oblique'
    )
    
    footer = Paragraph(
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br/>" +
        f"üìß contact@ts-aircargo.com | üìû +223 XX XX XX XX | üåê www.ts-aircargo.com<br/>" +
        f"¬© {datetime.now().year} TS Air Cargo Mali - Tous droits r√©serv√©s",
        footer_style
    )
    story.append(footer)
    
    # Construire le PDF
    doc.build(story)
    
    # R√©cup√©rer le contenu
    pdf_content = buffer.getvalue()
    buffer.close()
    
    return pdf_content


@agent_mali_required
def export_depenses_excel(request):
    """
    Exporter les d√©penses en format Excel avec formatage professionnel
    """
    import openpyxl
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from openpyxl.utils import get_column_letter
    from django.http import HttpResponse
    from datetime import datetime
    
    # R√©cup√©ration des filtres
    date_debut = request.GET.get('date_debut')
    date_fin = request.GET.get('date_fin')
    type_depense = request.GET.get('type_depense')
    
    # Dates par d√©faut
    today = timezone.now().date()
    if not date_debut:
        date_debut = today - timedelta(days=30)
    else:
        try:
            date_debut = datetime.strptime(date_debut, '%Y-%m-%d').date()
        except ValueError:
            date_debut = today - timedelta(days=30)
    
    if not date_fin:
        date_fin = today
    else:
        try:
            date_fin = datetime.strptime(date_fin, '%Y-%m-%d').date()
        except ValueError:
            date_fin = today
    
    # R√©cup√©ration des d√©penses
    depenses_query = Depense.objects.filter(
        date_depense__gte=date_debut,
        date_depense__lte=date_fin
    )
    
    if type_depense:
        depenses_query = depenses_query.filter(type_depense=type_depense)
    
    depenses = depenses_query.select_related('cree_par').order_by('-date_depense')
    
    # Cr√©ation du workbook Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Rapport D√©penses"
    
    # Styles pour le formatage
    header_font = Font(name='Arial', size=16, bold=True, color='FFFFFF')
    header_fill = PatternFill(start_color='FF6B35', end_color='FF6B35', fill_type='solid')
    
    subheader_font = Font(name='Arial', size=12, bold=True, color='2D3748')
    subheader_fill = PatternFill(start_color='F7FAFC', end_color='F7FAFC', fill_type='solid')
    
    data_font = Font(name='Arial', size=10)
    number_font = Font(name='Arial', size=10, bold=True)
    
    border = Border(
        left=Side(border_style='thin', color='E2E8F0'),
        right=Side(border_style='thin', color='E2E8F0'),
        top=Side(border_style='thin', color='E2E8F0'),
        bottom=Side(border_style='thin', color='E2E8F0')
    )
    
    # En-t√™te principal
    ws['A1'] = 'RAPPORT DES D√âPENSES - TS AIR CARGO MALI'
    ws.merge_cells('A1:G1')
    ws['A1'].font = header_font
    ws['A1'].fill = header_fill
    ws['A1'].alignment = Alignment(horizontal='center', vertical='center')
    
    # Sous-titre avec p√©riode
    ws['A2'] = f'P√©riode: {date_debut.strftime("%d/%m/%Y")} au {date_fin.strftime("%d/%m/%Y")}'
    ws.merge_cells('A2:G2')
    ws['A2'].font = subheader_font
    ws['A2'].alignment = Alignment(horizontal='center')
    
    # Date de g√©n√©ration
    ws['A3'] = f'G√©n√©r√© le: {datetime.now().strftime("%d/%m/%Y √† %H:%M")}'
    ws.merge_cells('A3:G3')
    ws['A3'].font = data_font
    ws['A3'].alignment = Alignment(horizontal='center')
    
    # R√©sum√©
    total_depenses = depenses.aggregate(total=Sum('montant'))['total'] or 0
    ws['A5'] = f'Total des d√©penses: {total_depenses:,.0f} FCFA'
    ws['A5'].font = subheader_font
    ws['A6'] = f'Nombre de d√©penses: {depenses.count()}'
    ws['A6'].font = subheader_font
    
    # En-t√™tes des colonnes
    headers = ['Date', 'Type', 'Description', 'Montant (FCFA)', 'Cr√©√© par', 'Date cr√©ation', 'Statut']
    for col_idx, header in enumerate(headers, start=1):
        cell = ws.cell(row=8, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
        cell.alignment = Alignment(horizontal='center')
    
    # Donn√©es des d√©penses
    for row_idx, depense in enumerate(depenses, start=9):
        row_data = [
            depense.date_depense.strftime('%d/%m/%Y'),
            depense.get_type_depense_display(),
            depense.description,
            float(depense.montant),
            f"{depense.cree_par.first_name} {depense.cree_par.last_name}" if depense.cree_par else "N/A",
            depense.date_creation.strftime('%d/%m/%Y %H:%M'),
            'Valid√©'
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx == 4:  # Colonne montant
                cell.font = number_font
                cell.number_format = '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Ajuster la largeur des colonnes
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = min(max_length + 2, 50)
        ws.column_dimensions[column].width = adjusted_width
    
    # Pr√©paration de la r√©ponse HTTP
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename="depenses_{date_debut}_{date_fin}.xlsx"'
    
    wb.save(response)
    return response


@agent_mali_required
def export_rapport_cargo_excel(request):
    """
    Exporter les rapports cargo en format Excel
    """
    import openpyxl
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from django.http import HttpResponse
    from datetime import datetime
    
    # R√©cup√©ration des filtres
    date_debut = request.GET.get('date_debut')
    date_fin = request.GET.get('date_fin')
    
    # Dates par d√©faut
    today = timezone.now().date()
    if not date_debut:
        date_debut = today - timedelta(days=30)
    else:
        try:
            date_debut = datetime.strptime(date_debut, '%Y-%m-%d').date()
        except ValueError:
            date_debut = today - timedelta(days=30)
    
    if not date_fin:
        date_fin = today
    else:
        try:
            date_fin = datetime.strptime(date_fin, '%Y-%m-%d').date()
        except ValueError:
            date_fin = today
    
    # R√©cup√©ration des colis cargo
    colis_cargo = Colis.objects.filter(
        type_transport='cargo',
        date_creation__gte=date_debut,
        date_creation__lte=date_fin
    ).select_related('client__user', 'lot').order_by('-date_creation')
    
    # R√©cup√©ration des lots avec colis cargo
    lots_cargo = Lot.objects.filter(
        colis__type_transport='cargo',
        date_creation__gte=date_debut,
        date_creation__lte=date_fin
    ).distinct().prefetch_related('colis_set').order_by('-date_creation')
    
    # Cr√©ation du workbook Excel
    wb = openpyxl.Workbook()
    
    # Feuille 1: R√©sum√© Cargo
    ws1 = wb.active
    ws1.title = "R√©sum√© Cargo"
    
    # Styles
    header_font = Font(name='Arial', size=16, bold=True, color='FFFFFF')
    header_fill = PatternFill(start_color='FF6B35', end_color='FF6B35', fill_type='solid')
    subheader_font = Font(name='Arial', size=12, bold=True, color='2D3748')
    subheader_fill = PatternFill(start_color='F7FAFC', end_color='F7FAFC', fill_type='solid')
    data_font = Font(name='Arial', size=10)
    number_font = Font(name='Arial', size=10, bold=True)
    border = Border(
        left=Side(border_style='thin', color='E2E8F0'),
        right=Side(border_style='thin', color='E2E8F0'),
        top=Side(border_style='thin', color='E2E8F0'),
        bottom=Side(border_style='thin', color='E2E8F0')
    )
    
    # En-t√™te
    ws1['A1'] = 'RAPPORT CARGO - TS AIR CARGO'
    ws1.merge_cells('A1:F1')
    ws1['A1'].font = header_font
    ws1['A1'].fill = header_fill
    ws1['A1'].alignment = Alignment(horizontal='center', vertical='center')
    
    # Statistiques g√©n√©rales
    total_colis = colis_cargo.count()
    valeur_totale = colis_cargo.aggregate(total=Sum('prix_calcule'))['total'] or 0
    poids_total = colis_cargo.aggregate(total=Sum('poids'))['total'] or 0
    
    stats_data = [
        ['Indicateur', 'Valeur'],
        ['Total Colis Cargo', total_colis],
        ['Valeur Totale (FCFA)', f"{valeur_totale:,.0f}"],
        ['Poids Total (Kg)', f"{poids_total:,.1f}"],
        ['Nombre de Lots', lots_cargo.count()],
    ]
    
    for row_idx, row_data in enumerate(stats_data, start=3):
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws1.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if row_idx == 3:
                cell.font = subheader_font
                cell.fill = subheader_fill
            else:
                cell.font = data_font
    
    # Feuille 2: D√©tail des Colis Cargo
    ws2 = wb.create_sheet(title="Colis Cargo")
    
    # En-t√™tes des colis
    colis_headers = ['Code Suivi', 'Client', 'Description', 'Poids (Kg)', 'Valeur (FCFA)', 'Statut', 'Date Cr√©ation', 'Lot']
    for col_idx, header in enumerate(colis_headers, start=1):
        cell = ws2.cell(row=1, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
    
    # Donn√©es des colis
    for row_idx, colis in enumerate(colis_cargo, start=2):
        row_data = [
            colis.code_suivi,
            f"{colis.client.user.first_name} {colis.client.user.last_name}" if colis.client and colis.client.user else "N/A",
            colis.description_contenu,
            float(colis.poids) if colis.poids else 0,
            float(colis.prix_calcule) if colis.prix_calcule else 0,
            colis.get_statut_display(),
            colis.date_creation.strftime('%d/%m/%Y'),
            colis.lot.numero_lot if colis.lot else "Aucun"
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws2.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx in [4, 5]:  # Colonnes num√©riques
                cell.font = number_font
                cell.number_format = '#,##0.00' if col_idx == 4 else '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Feuille 3: Lots Cargo
    ws3 = wb.create_sheet(title="Lots Cargo")
    
    # En-t√™tes des lots
    lots_headers = ['Num√©ro Lot', 'Nb Colis', 'Poids Total (Kg)', 'Prix Transport (FCFA)', 'Statut', 'Date Cr√©ation', 'Date Exp√©dition']
    for col_idx, header in enumerate(lots_headers, start=1):
        cell = ws3.cell(row=1, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
    
    # Donn√©es des lots
    for row_idx, lot in enumerate(lots_cargo, start=2):
        nb_colis_cargo = lot.colis_set.filter(type_transport='cargo').count()
        poids_lot = lot.colis_set.filter(type_transport='cargo').aggregate(total=Sum('poids'))['total'] or 0
        
        row_data = [
            lot.numero_lot,
            nb_colis_cargo,
            float(poids_lot),
            float(lot.prix_transport) if lot.prix_transport else 0,
            lot.get_statut_display(),
            lot.date_creation.strftime('%d/%m/%Y'),
            lot.date_expedition.strftime('%d/%m/%Y') if lot.date_expedition else "Non exp√©di√©"
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws3.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx in [2, 3, 4]:  # Colonnes num√©riques
                cell.font = number_font
                if col_idx == 3:
                    cell.number_format = '#,##0.00'
                else:
                    cell.number_format = '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Ajuster les largeurs des colonnes pour toutes les feuilles
    for ws in [ws1, ws2, ws3]:
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column].width = adjusted_width
    
    # Pr√©paration de la r√©ponse HTTP
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename="rapport_cargo_{date_debut}_{date_fin}.xlsx"'
    
    wb.save(response)
    return response


@agent_mali_required
def export_rapport_express_excel(request):
    """
    Exporter les rapports express en format Excel
    """
    import openpyxl
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from django.http import HttpResponse
    from datetime import datetime
    
    # R√©cup√©ration des filtres
    date_debut = request.GET.get('date_debut')
    date_fin = request.GET.get('date_fin')
    
    # Dates par d√©faut
    today = timezone.now().date()
    if not date_debut:
        date_debut = today - timedelta(days=30)
    else:
        try:
            date_debut = datetime.strptime(date_debut, '%Y-%m-%d').date()
        except ValueError:
            date_debut = today - timedelta(days=30)
    
    if not date_fin:
        date_fin = today
    else:
        try:
            date_fin = datetime.strptime(date_fin, '%Y-%m-%d').date()
        except ValueError:
            date_fin = today
    
    # R√©cup√©ration des colis express
    colis_express = Colis.objects.filter(
        type_transport='express',
        date_creation__gte=date_debut,
        date_creation__lte=date_fin
    ).select_related('client__user', 'lot').order_by('-date_creation')
    
    # R√©cup√©ration des lots avec colis express
    lots_express = Lot.objects.filter(
        colis__type_transport='express',
        date_creation__gte=date_debut,
        date_creation__lte=date_fin
    ).distinct().prefetch_related('colis_set').order_by('-date_creation')
    
    # Cr√©ation du workbook Excel
    wb = openpyxl.Workbook()
    
    # Feuille 1: R√©sum√© Express
    ws1 = wb.active
    ws1.title = "R√©sum√© Express"
    
    # Styles
    header_font = Font(name='Arial', size=16, bold=True, color='FFFFFF')
    header_fill = PatternFill(start_color='28A745', end_color='28A745', fill_type='solid')  # Vert pour express
    subheader_font = Font(name='Arial', size=12, bold=True, color='2D3748')
    subheader_fill = PatternFill(start_color='F7FAFC', end_color='F7FAFC', fill_type='solid')
    data_font = Font(name='Arial', size=10)
    number_font = Font(name='Arial', size=10, bold=True)
    border = Border(
        left=Side(border_style='thin', color='E2E8F0'),
        right=Side(border_style='thin', color='E2E8F0'),
        top=Side(border_style='thin', color='E2E8F0'),
        bottom=Side(border_style='thin', color='E2E8F0')
    )
    
    # En-t√™te
    ws1['A1'] = 'RAPPORT EXPRESS - TS AIR CARGO'
    ws1.merge_cells('A1:F1')
    ws1['A1'].font = header_font
    ws1['A1'].fill = header_fill
    ws1['A1'].alignment = Alignment(horizontal='center', vertical='center')
    
    # Statistiques g√©n√©rales
    total_colis = colis_express.count()
    valeur_totale = colis_express.aggregate(total=Sum('prix_calcule'))['total'] or 0
    poids_total = colis_express.aggregate(total=Sum('poids'))['total'] or 0
    
    # Calcul du d√©lai moyen de livraison
    colis_livres = colis_express.filter(statut='livre')
    delai_moyen = 0
    if colis_livres.exists():
        delais = []
        for colis in colis_livres:
            livraisons = colis.livraisons.filter(statut='livree')
            if livraisons.exists():
                livraison = livraisons.first()
                if livraison.date_livraison_effective:
                    delai = (livraison.date_livraison_effective.date() - colis.date_creation.date()).days
                    delais.append(delai)
        if delais:
            delai_moyen = sum(delais) / len(delais)
    
    stats_data = [
        ['Indicateur', 'Valeur'],
        ['Total Colis Express', total_colis],
        ['Valeur Totale (FCFA)', f"{valeur_totale:,.0f}"],
        ['Poids Total (Kg)', f"{poids_total:,.1f}"],
        ['Nombre de Lots', lots_express.count()],
        ['D√©lai Moyen Livraison (jours)', f"{delai_moyen:.1f}"],
        ['Taux de Livraison (%)', f"{(colis_livres.count() / total_colis * 100):.1f}" if total_colis > 0 else "0.0"],
    ]
    
    for row_idx, row_data in enumerate(stats_data, start=3):
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws1.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if row_idx == 3:
                cell.font = subheader_font
                cell.fill = subheader_fill
            else:
                cell.font = data_font
    
    # Feuille 2: D√©tail des Colis Express
    ws2 = wb.create_sheet(title="Colis Express")
    
    # En-t√™tes des colis
    colis_headers = ['Code Suivi', 'Client', 'Description', 'Poids (Kg)', 'Valeur (FCFA)', 'Statut', 'Date Cr√©ation', 'Date Livraison', 'D√©lai (jours)', 'Lot']
    for col_idx, header in enumerate(colis_headers, start=1):
        cell = ws2.cell(row=1, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
    
    # Donn√©es des colis
    for row_idx, colis in enumerate(colis_express, start=2):
        # Calcul du d√©lai
        delai = ""
        date_livraison = ""
        livraisons = colis.livraisons.filter(statut='livree')
        if livraisons.exists():
            livraison = livraisons.first()
            if livraison.date_livraison_effective:
                date_livraison = livraison.date_livraison_effective.strftime('%d/%m/%Y')
                delai = (livraison.date_livraison_effective.date() - colis.date_creation.date()).days
        
        row_data = [
            colis.code_suivi,
            f"{colis.client.user.first_name} {colis.client.user.last_name}" if colis.client and colis.client.user else "N/A",
            colis.description_contenu,
            float(colis.poids) if colis.poids else 0,
            float(colis.prix_calcule) if colis.prix_calcule else 0,
            colis.get_statut_display(),
            colis.date_creation.strftime('%d/%m/%Y'),
            date_livraison if date_livraison else "Non livr√©",
            delai if delai != "" else "N/A",
            colis.lot.numero_lot if colis.lot else "Aucun"
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws2.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx in [4, 5, 9]:  # Colonnes num√©riques
                cell.font = number_font
                if col_idx == 4:
                    cell.number_format = '#,##0.00'
                else:
                    cell.number_format = '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Feuille 3: Lots Express
    ws3 = wb.create_sheet(title="Lots Express")
    
    # En-t√™tes des lots
    lots_headers = ['Num√©ro Lot', 'Nb Colis', 'Poids Total (Kg)', 'Prix Transport (FCFA)', 'Frais Douane (FCFA)', 'Statut', 'Date Cr√©ation', 'Date Exp√©dition']
    for col_idx, header in enumerate(lots_headers, start=1):
        cell = ws3.cell(row=1, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
    
    # Donn√©es des lots
    for row_idx, lot in enumerate(lots_express, start=2):
        nb_colis_express = lot.colis_set.filter(type_transport='express').count()
        poids_lot = lot.colis_set.filter(type_transport='express').aggregate(total=Sum('poids'))['total'] or 0
        
        row_data = [
            lot.numero_lot,
            nb_colis_express,
            float(poids_lot),
            float(lot.prix_transport) if lot.prix_transport else 0,
            float(lot.frais_douane) if hasattr(lot, 'frais_douane') and lot.frais_douane else 0,
            lot.get_statut_display(),
            lot.date_creation.strftime('%d/%m/%Y'),
            lot.date_expedition.strftime('%d/%m/%Y') if lot.date_expedition else "Non exp√©di√©"
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws3.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx in [2, 3, 4, 5]:  # Colonnes num√©riques
                cell.font = number_font
                if col_idx == 3:
                    cell.number_format = '#,##0.00'
                else:
                    cell.number_format = '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Ajuster les largeurs des colonnes pour toutes les feuilles
    for ws in [ws1, ws2, ws3]:
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column].width = adjusted_width
    
    # Pr√©paration de la r√©ponse HTTP
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename="rapport_express_{date_debut}_{date_fin}.xlsx"'
    
    wb.save(response)
    return response


@agent_mali_required
def export_rapport_bateau_excel(request):
    """
    Exporter les rapports bateau en format Excel
    """
    import openpyxl
    from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
    from django.http import HttpResponse
    from datetime import datetime
    
    # R√©cup√©ration des filtres
    date_debut = request.GET.get('date_debut')
    date_fin = request.GET.get('date_fin')
    
    # Dates par d√©faut
    today = timezone.now().date()
    if not date_debut:
        date_debut = today - timedelta(days=30)
    else:
        try:
            date_debut = datetime.strptime(date_debut, '%Y-%m-%d').date()
        except ValueError:
            date_debut = today - timedelta(days=30)
    
    if not date_fin:
        date_fin = today
    else:
        try:
            date_fin = datetime.strptime(date_fin, '%Y-%m-%d').date()
        except ValueError:
            date_fin = today
    
    # R√©cup√©ration des colis bateau
    colis_bateau = Colis.objects.filter(
        type_transport='bateau',
        date_creation__gte=date_debut,
        date_creation__lte=date_fin
    ).select_related('client__user', 'lot').order_by('-date_creation')
    
    # R√©cup√©ration des lots avec colis bateau
    lots_bateau = Lot.objects.filter(
        colis__type_transport='bateau',
        date_creation__gte=date_debut,
        date_creation__lte=date_fin
    ).distinct().prefetch_related('colis_set').order_by('-date_creation')
    
    # Cr√©ation du workbook Excel
    wb = openpyxl.Workbook()
    
    # Feuille 1: R√©sum√© Bateau
    ws1 = wb.active
    ws1.title = "R√©sum√© Bateau"
    
    # Styles
    header_font = Font(name='Arial', size=16, bold=True, color='FFFFFF')
    header_fill = PatternFill(start_color='007BFF', end_color='007BFF', fill_type='solid')  # Bleu pour bateau
    subheader_font = Font(name='Arial', size=12, bold=True, color='2D3748')
    subheader_fill = PatternFill(start_color='F7FAFC', end_color='F7FAFC', fill_type='solid')
    data_font = Font(name='Arial', size=10)
    number_font = Font(name='Arial', size=10, bold=True)
    border = Border(
        left=Side(border_style='thin', color='E2E8F0'),
        right=Side(border_style='thin', color='E2E8F0'),
        top=Side(border_style='thin', color='E2E8F0'),
        bottom=Side(border_style='thin', color='E2E8F0')
    )
    
    # En-t√™te
    ws1['A1'] = 'RAPPORT BATEAU - TS AIR CARGO'
    ws1.merge_cells('A1:F1')
    ws1['A1'].font = header_font
    ws1['A1'].fill = header_fill
    ws1['A1'].alignment = Alignment(horizontal='center', vertical='center')
    
    # Statistiques g√©n√©rales
    total_colis = colis_bateau.count()
    valeur_totale = colis_bateau.aggregate(total=Sum('prix_calcule'))['total'] or 0
    poids_total = colis_bateau.aggregate(total=Sum('poids'))['total'] or 0
    
    # Calcul du d√©lai moyen de livraison
    colis_livres = colis_bateau.filter(statut='livre')
    delai_moyen = 0
    if colis_livres.exists():
        delais = []
        for colis in colis_livres:
            livraisons = colis.livraisons.filter(statut='livree')
            if livraisons.exists():
                livraison = livraisons.first()
                if livraison.date_livraison_effective:
                    delai = (livraison.date_livraison_effective.date() - colis.date_creation.date()).days
                    delais.append(delai)
        if delais:
            delai_moyen = sum(delais) / len(delais)
    
    stats_data = [
        ['Indicateur', 'Valeur'],
        ['Total Colis Bateau', total_colis],
        ['Valeur Totale (FCFA)', f"{valeur_totale:,.0f}"],
        ['Poids Total (Kg)', f"{poids_total:,.1f}"],
        ['Nombre de Lots', lots_bateau.count()],
        ['D√©lai Moyen Livraison (jours)', f"{delai_moyen:.1f}"],
        ['Taux de Livraison (%)', f"{(colis_livres.count() / total_colis * 100):.1f}" if total_colis > 0 else "0.0"],
    ]
    
    for row_idx, row_data in enumerate(stats_data, start=3):
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws1.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if row_idx == 3:
                cell.font = subheader_font
                cell.fill = subheader_fill
            else:
                cell.font = data_font
    
    # Feuille 2: D√©tail des Colis Bateau
    ws2 = wb.create_sheet(title="Colis Bateau")
    
    # En-t√™tes des colis
    colis_headers = ['Code Suivi', 'Client', 'Description', 'Poids (Kg)', 'Valeur (FCFA)', 'Statut', 'Date Cr√©ation', 'Date Livraison', 'D√©lai (jours)', 'Lot']
    for col_idx, header in enumerate(colis_headers, start=1):
        cell = ws2.cell(row=1, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
    
    # Donn√©es des colis
    for row_idx, colis in enumerate(colis_bateau, start=2):
        # Calcul du d√©lai
        delai = ""
        date_livraison = ""
        livraisons = colis.livraisons.filter(statut='livree')
        if livraisons.exists():
            livraison = livraisons.first()
            if livraison.date_livraison_effective:
                date_livraison = livraison.date_livraison_effective.strftime('%d/%m/%Y')
                delai = (livraison.date_livraison_effective.date() - colis.date_creation.date()).days
        
        row_data = [
            colis.code_suivi,
            f"{colis.client.user.first_name} {colis.client.user.last_name}" if colis.client and colis.client.user else "N/A",
            colis.description_contenu,
            float(colis.poids) if colis.poids else 0,
            float(colis.prix_calcule) if colis.prix_calcule else 0,
            colis.get_statut_display(),
            colis.date_creation.strftime('%d/%m/%Y'),
            date_livraison if date_livraison else "Non livr√©",
            delai if delai != "" else "N/A",
            colis.lot.numero_lot if colis.lot else "Aucun"
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws2.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx in [4, 5, 9]:  # Colonnes num√©riques
                cell.font = number_font
                if col_idx == 4:
                    cell.number_format = '#,##0.00'
                else:
                    cell.number_format = '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Feuille 3: Lots Bateau
    ws3 = wb.create_sheet(title="Lots Bateau")
    
    # En-t√™tes des lots
    lots_headers = ['Num√©ro Lot', 'Nb Colis', 'Poids Total (Kg)', 'Prix Transport (FCFA)', 'Frais Douane (FCFA)', 'Statut', 'Date Cr√©ation', 'Date Exp√©dition']
    for col_idx, header in enumerate(lots_headers, start=1):
        cell = ws3.cell(row=1, column=col_idx, value=header)
        cell.font = subheader_font
        cell.fill = subheader_fill
        cell.border = border
    
    # Donn√©es des lots
    for row_idx, lot in enumerate(lots_bateau, start=2):
        nb_colis_bateau = lot.colis_set.filter(type_transport='bateau').count()
        poids_lot = lot.colis_set.filter(type_transport='bateau').aggregate(total=Sum('poids'))['total'] or 0
        
        row_data = [
            lot.numero_lot,
            nb_colis_bateau,
            float(poids_lot),
            float(lot.prix_transport) if lot.prix_transport else 0,
            float(lot.frais_douane) if hasattr(lot, 'frais_douane') and lot.frais_douane else 0,
            lot.get_statut_display(),
            lot.date_creation.strftime('%d/%m/%Y'),
            lot.date_expedition.strftime('%d/%m/%Y') if lot.date_expedition else "Non exp√©di√©"
        ]
        
        for col_idx, value in enumerate(row_data, start=1):
            cell = ws3.cell(row=row_idx, column=col_idx, value=value)
            cell.border = border
            if col_idx in [2, 3, 4, 5]:  # Colonnes num√©riques
                cell.font = number_font
                if col_idx == 3:
                    cell.number_format = '#,##0.00'
                else:
                    cell.number_format = '#,##0'
                cell.alignment = Alignment(horizontal='right')
            else:
                cell.font = data_font
    
    # Ajuster les largeurs des colonnes pour toutes les feuilles
    for ws in [ws1, ws2, ws3]:
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column].width = adjusted_width
    
    # Pr√©paration de la r√©ponse HTTP
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename="rapport_bateau_{date_debut}_{date_fin}.xlsx"'
    
    wb.save(response)
    return response
