#!/usr/bin/env python
"""
Script de test pour valider les corrections de notifications
Ex√©cuter avec: python manage.py shell < test_notifications_fix.py
"""

import os
import sys
from django.conf import settings
from django.utils import timezone

print("üîß Test des corrections de notifications - TS Air Cargo")
print("=" * 60)

# Test 1: V√©rifier que la nouvelle fonction existe
print("üìã Test 1: V√©rification des fonctions de notification...")
try:
    from notifications_app.tasks import send_bulk_received_colis_notifications
    print("‚úÖ Nouvelle fonction send_bulk_received_colis_notifications trouv√©e")
    
    # V√©rifier aussi l'ancienne (elle doit toujours exister)
    from notifications_app.tasks import send_bulk_lot_notifications
    print("‚úÖ Ancienne fonction send_bulk_lot_notifications toujours disponible")
    
except ImportError as e:
    print("‚ùå Erreur import:", e)

# Test 2: V√©rifier le template de notification corrig√©
print("\nüìã Test 2: V√©rification du template de notification...")
try:
    from notifications_app.tasks import send_bulk_received_colis_notifications
    import inspect
    
    # R√©cup√©rer le code source de la fonction
    source = inspect.getsource(send_bulk_received_colis_notifications)
    
    if "Nous vous contacterons bient√¥t" in source:
        print("‚ùå Le message contient encore la partie √† supprimer")
    else:
        print("‚úÖ Message de notification corrig√© (partie contact supprim√©e)")
        
    if "colis_ids_list" in source:
        print("‚úÖ La fonction utilise bien une liste de colis sp√©cifiques")
    else:
        print("‚ùå La fonction ne semble pas utiliser la liste de colis")
        
except Exception as e:
    print("‚ùå Erreur v√©rification template:", e)

# Test 3: V√©rifier la modification dans la vue
print("\nüìã Test 3: V√©rification de la vue recevoir_lot...")
try:
    from agent_mali_app.views import recevoir_lot_view
    import inspect
    
    source = inspect.getsource(recevoir_lot_view)
    
    if "send_bulk_received_colis_notifications" in source:
        print("‚úÖ La vue utilise la nouvelle fonction de notification cibl√©e")
    else:
        print("‚ùå La vue n'utilise pas la nouvelle fonction")
        
    if "colis_recus_ids_int" in source:
        print("‚úÖ La vue passe les IDs des colis r√©ceptionn√©s sp√©cifiquement")
    elif "colis_ids_list" in source:
        print("‚úÖ La vue passe une liste de colis sp√©cifiques")
    else:
        print("‚ùå La vue ne passe pas les colis sp√©cifiques")
    
    # Debug: montrer une partie du code pour diagnostic
    if "send_bulk_received_colis_notifications" not in source:
        print("üîç Recherche de 'send_bulk_' dans le code...")
        lines_with_send = [line.strip() for line in source.split('\n') if 'send_bulk' in line]
        if lines_with_send:
            print(f"   Trouv√©: {lines_with_send}")
        else:
            print("   Aucune ligne avec 'send_bulk' trouv√©e")
        
except Exception as e:
    print("‚ùå Erreur v√©rification vue:", e)

# Test 4: Simuler le comportement attendu
print("\nüìã Test 4: Simulation du comportement...")
try:
    from agent_chine_app.models import Lot, Colis
    from agent_mali_app.models import ReceptionLot
    from authentication.models import CustomUser
    
    # Compter les √©l√©ments actuels
    lots_count = Lot.objects.count()
    colis_count = Colis.objects.count()
    
    print(f"üìä Base de donn√©es actuelle:")
    print(f"   - Lots: {lots_count}")
    print(f"   - Colis: {colis_count}")
    
    if colis_count > 0:
        # Prendre un exemple de colis
        colis_exemple = Colis.objects.first()
        print(f"   - Exemple colis: {colis_exemple.numero_suivi}")
        print(f"   - Statut: {colis_exemple.statut}")
        print(f"   - Client: {colis_exemple.client.user.get_full_name()}")
        
        # Test de la logique
        if colis_exemple.statut == 'arrive':
            print("‚úÖ Ce colis est arriv√© - il devrait avoir re√ßu une notification")
        else:
            print(f"‚ÑπÔ∏è  Ce colis ({colis_exemple.statut}) ne devrait pas avoir de notification d'arriv√©e")
    
except Exception as e:
    print("‚ùå Erreur simulation:", e)

# Test 5: V√©rifier les imports
print("\nüìã Test 5: V√©rification des imports...")
try:
    # V√©rifier que tous les imports n√©cessaires fonctionnent
    from notifications_app.models import Notification, NotificationTask
    from django.contrib.auth import get_user_model
    
    notifications_count = Notification.objects.count()
    tasks_count = NotificationTask.objects.count()
    
    print(f"‚úÖ Notifications en base: {notifications_count}")
    print(f"‚úÖ T√¢ches de notification: {tasks_count}")
    
except Exception as e:
    print("‚ùå Erreur imports:", e)

print("\n" + "=" * 60)
print("üéâ Tests termin√©s !")
print("\nüí° R√©sum√© des corrections:")
print("1. ‚úÖ Message all√©g√© (suppression contact)")
print("2. ‚úÖ Fonction cibl√©e pour colis r√©ceptionn√©s seulement")  
print("3. ‚úÖ Vue modifi√©e pour utiliser la nouvelle fonction")
print("4. ‚úÖ √âvite les doublons (notifications par colis r√©ellement re√ßus)")

print("\nüîÑ Prochaines √©tapes:")
print("1. Tester avec un lot r√©el en r√©ception partielle")
print("2. V√©rifier que seuls les colis s√©lectionn√©s re√ßoivent des notifications")
print("3. Confirmer que les r√©ceptions ult√©rieures n'envoient pas de doublons")